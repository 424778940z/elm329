<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\obdst18.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\obdst18.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Fri Jan 25 14:13:39 2019
<BR><P>
<H3>Maximum Stack Usage =        324 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
IsoCanAdapter::onTryConnectEcu(bool) &rArr; IsoCanAdapter::receiveFromEcu(bool) &rArr; CanReplyFormatter::replyNextFrame(const CanMsgBuffer*, int) &rArr; CanReplyFormatter::replyH1(const CanMsgBuffer*, unsigned, util::string&) &rArr; to_ascii(const unsigned char*, unsigned, util::string&) &rArr; util::string::operator +=(char) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">NMI_Handler</a><BR>
 <LI><a href="#[9]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">HardFault_Handler</a><BR>
 <LI><a href="#[a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SVC_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SysTick_Handler</a><BR>
 <LI><a href="#[19]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[19]">ADC1_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[26]">CEC_CAN_IRQHandler</a> from candriverstm32f0xx.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[16]">DMA1_Channel1_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[17]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_5_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[12]">EXTI0_1_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[13]">EXTI2_3_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[14]">EXTI4_15_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[10]">FLASH_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[9]">HardFault_Handler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[21]">I2C1_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[8]">NMI_Handler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[e]">PVD_VDDIO2_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[11]">RCC_CRS_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[f]">RTC_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[7]">Reset_Handler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[22]">SPI1_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[23]">SPI2_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[2f]">SystemInit</a> from system_stm32f0xx.o(.text) referenced from startup_stm32f042.o(.text)
 <LI><a href="#[1e]">TIM14_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[1f]">TIM16_IRQHandler</a> from timerstm32f0xx.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[20]">TIM17_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[1a]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[1b]">TIM1_CC_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[1c]">TIM2_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[1d]">TIM3_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[15]">TSC_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[24]">USART1_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[25]">USART2_IRQHandler</a> from cmduartstm32f0xx.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[27]">USB_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_stm32f042.o(.text) referenced from startup_stm32f042.o(RESET)
 <LI><a href="#[32]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[57]">AutoAdapter::wiringCheck()</a> from autoadapter.o(i._ZN11AutoAdapter11wiringCheckEv) referenced from autoadapter.o(.constdata__ZTV11AutoAdapter)
 <LI><a href="#[4f]">AutoAdapter::onConnectEcu()</a> from autoadapter.o(i._ZN11AutoAdapter12onConnectEcuEv) referenced from autoadapter.o(.constdata__ZTV11AutoAdapter)
 <LI><a href="#[52]">AutoAdapter::getDescription()</a> from autoadapter.o(.text) referenced from autoadapter.o(.constdata__ZTV11AutoAdapter)
 <LI><a href="#[50]">AutoAdapter::onTryConnectEcu(bool)</a> from autoadapter.o(.text) referenced from autoadapter.o(.constdata__ZTV11AutoAdapter)
 <LI><a href="#[53]">AutoAdapter::getDescriptionNum()</a> from autoadapter.o(.text) referenced from autoadapter.o(.constdata__ZTV11AutoAdapter)
 <LI><a href="#[51]">AutoAdapter::onRequest(const unsigned char*, int)</a> from autoadapter.o(.text) referenced from autoadapter.o(.constdata__ZTV11AutoAdapter)
 <LI><a href="#[2b]">DataCollector::~DataCollector()</a> from datacollector.o(i._ZN13DataCollectorD1Ev) referenced from datacollector.o(.text)
 <LI><a href="#[5d]">IsoCanAdapter::dumpBuffer()</a> from isocan.o(.text) referenced from isocan.o(.constdata__ZTV13IsoCanAdapter)
 <LI><a href="#[5d]">IsoCanAdapter::dumpBuffer()</a> from isocan.o(.text) referenced from isocan.o(.constdata__ZTV15IsoCan11Adapter)
 <LI><a href="#[5d]">IsoCanAdapter::dumpBuffer()</a> from isocan.o(.text) referenced from isocan.o(.constdata__ZTV15IsoCan29Adapter)
 <LI><a href="#[5e]">IsoCanAdapter::wiringCheck()</a> from isocan.o(.text) referenced from isocan.o(.constdata__ZTV13IsoCanAdapter)
 <LI><a href="#[5e]">IsoCanAdapter::wiringCheck()</a> from isocan.o(.text) referenced from isocan.o(.constdata__ZTV15IsoCan11Adapter)
 <LI><a href="#[5e]">IsoCanAdapter::wiringCheck()</a> from isocan.o(.text) referenced from isocan.o(.constdata__ZTV15IsoCan29Adapter)
 <LI><a href="#[5b]">IsoCanAdapter::onTryConnectEcu(bool)</a> from isocan.o(.text) referenced from isocan.o(.constdata__ZTV13IsoCanAdapter)
 <LI><a href="#[5b]">IsoCanAdapter::onTryConnectEcu(bool)</a> from isocan.o(.text) referenced from isocan.o(.constdata__ZTV15IsoCan11Adapter)
 <LI><a href="#[5b]">IsoCanAdapter::onTryConnectEcu(bool)</a> from isocan.o(.text) referenced from isocan.o(.constdata__ZTV15IsoCan29Adapter)
 <LI><a href="#[5c]">IsoCanAdapter::onRequest(const unsigned char*, int)</a> from isocan.o(.text) referenced from isocan.o(.constdata__ZTV13IsoCanAdapter)
 <LI><a href="#[5c]">IsoCanAdapter::onRequest(const unsigned char*, int)</a> from isocan.o(.text) referenced from isocan.o(.constdata__ZTV15IsoCan11Adapter)
 <LI><a href="#[5c]">IsoCanAdapter::onRequest(const unsigned char*, int)</a> from isocan.o(.text) referenced from isocan.o(.constdata__ZTV15IsoCan29Adapter)
 <LI><a href="#[5f]">IsoCan11Adapter::onConnectEcu()</a> from isocan.o(.text) referenced from isocan.o(.constdata__ZTV15IsoCan11Adapter)
 <LI><a href="#[60]">IsoCan11Adapter::getDescription()</a> from isocan.o(.text) referenced from isocan.o(.constdata__ZTV15IsoCan11Adapter)
 <LI><a href="#[66]">IsoCan11Adapter::processFlowFrame(const CanMsgBuffer*)</a> from isocan.o(.text) referenced from isocan.o(.constdata__ZTV15IsoCan11Adapter)
 <LI><a href="#[64]">IsoCan11Adapter::setFilterAndMask()</a> from isocan.o(.text) referenced from isocan.o(.constdata__ZTV15IsoCan11Adapter)
 <LI><a href="#[61]">IsoCan11Adapter::getDescriptionNum()</a> from isocan.o(.text) referenced from isocan.o(.constdata__ZTV15IsoCan11Adapter)
 <LI><a href="#[62]">IsoCan11Adapter::open()</a> from isocan.o(.text) referenced from isocan.o(.constdata__ZTV15IsoCan11Adapter)
 <LI><a href="#[67]">IsoCan29Adapter::onConnectEcu()</a> from isocan.o(.text) referenced from isocan.o(.constdata__ZTV15IsoCan29Adapter)
 <LI><a href="#[68]">IsoCan29Adapter::getDescription()</a> from isocan.o(.text) referenced from isocan.o(.constdata__ZTV15IsoCan29Adapter)
 <LI><a href="#[6e]">IsoCan29Adapter::processFlowFrame(const CanMsgBuffer*)</a> from isocan.o(.text) referenced from isocan.o(.constdata__ZTV15IsoCan29Adapter)
 <LI><a href="#[6c]">IsoCan29Adapter::setFilterAndMask()</a> from isocan.o(.text) referenced from isocan.o(.constdata__ZTV15IsoCan29Adapter)
 <LI><a href="#[69]">IsoCan29Adapter::getDescriptionNum()</a> from isocan.o(.text) referenced from isocan.o(.constdata__ZTV15IsoCan29Adapter)
 <LI><a href="#[6a]">IsoCan29Adapter::open()</a> from isocan.o(.text) referenced from isocan.o(.constdata__ZTV15IsoCan29Adapter)
 <LI><a href="#[54]">ProtocolAdapter::dumpBuffer()</a> from autoadapter.o(i._ZN15ProtocolAdapter10dumpBufferEv) referenced from autoadapter.o(.constdata__ZTV11AutoAdapter)
 <LI><a href="#[54]">ProtocolAdapter::dumpBuffer()</a> from autoadapter.o(i._ZN15ProtocolAdapter10dumpBufferEv) referenced from padapter.o(.constdata__ZTV15ProtocolAdapter)
 <LI><a href="#[59]">ProtocolAdapter::setFilterAndMask()</a> from autoadapter.o(i._ZN15ProtocolAdapter16setFilterAndMaskEv) referenced from autoadapter.o(.constdata__ZTV11AutoAdapter)
 <LI><a href="#[59]">ProtocolAdapter::setFilterAndMask()</a> from autoadapter.o(i._ZN15ProtocolAdapter16setFilterAndMaskEv) referenced from isocan.o(.constdata__ZTV13IsoCanAdapter)
 <LI><a href="#[59]">ProtocolAdapter::setFilterAndMask()</a> from autoadapter.o(i._ZN15ProtocolAdapter16setFilterAndMaskEv) referenced from padapter.o(.constdata__ZTV15ProtocolAdapter)
 <LI><a href="#[55]">ProtocolAdapter::open()</a> from autoadapter.o(i._ZN15ProtocolAdapter4openEv) referenced from autoadapter.o(.constdata__ZTV11AutoAdapter)
 <LI><a href="#[55]">ProtocolAdapter::open()</a> from autoadapter.o(i._ZN15ProtocolAdapter4openEv) referenced from isocan.o(.constdata__ZTV13IsoCanAdapter)
 <LI><a href="#[55]">ProtocolAdapter::open()</a> from autoadapter.o(i._ZN15ProtocolAdapter4openEv) referenced from padapter.o(.constdata__ZTV15ProtocolAdapter)
 <LI><a href="#[56]">ProtocolAdapter::close()</a> from padapter.o(.text) referenced from autoadapter.o(.constdata__ZTV11AutoAdapter)
 <LI><a href="#[56]">ProtocolAdapter::close()</a> from padapter.o(.text) referenced from isocan.o(.constdata__ZTV13IsoCanAdapter)
 <LI><a href="#[56]">ProtocolAdapter::close()</a> from padapter.o(.text) referenced from isocan.o(.constdata__ZTV15IsoCan11Adapter)
 <LI><a href="#[56]">ProtocolAdapter::close()</a> from padapter.o(.text) referenced from isocan.o(.constdata__ZTV15IsoCan29Adapter)
 <LI><a href="#[56]">ProtocolAdapter::close()</a> from padapter.o(.text) referenced from padapter.o(.constdata__ZTV15ProtocolAdapter)
 <LI><a href="#[29]">[local to adapter_cpp]::UserUartRcvHandler(unsigned char)</a> from adapter.o(.text) referenced from adapter.o(.text)
 <LI><a href="#[3f]">[local to dispatcher_cpp]::OnSetBytes(const util::string&, int)</a> from dispatcher.o(.text) referenced 9 times from dispatcher.o(.constdata)
 <LI><a href="#[37]">[local to dispatcher_cpp]::OnGetSerial(const util::string&, int)</a> from dispatcher.o(.text) referenced from dispatcher.o(.constdata)
 <LI><a href="#[49]">[local to dispatcher_cpp]::OnKwDisplay(const util::string&, int)</a> from dispatcher.o(.text) referenced from dispatcher.o(.constdata)
 <LI><a href="#[3a]">[local to dispatcher_cpp]::OnBufferDump(const util::string&, int)</a> from dispatcher.o(.text) referenced from dispatcher.o(.constdata)
 <LI><a href="#[3e]">[local to dispatcher_cpp]::OnResetBytes(const util::string&, int)</a> from dispatcher.o(.text) referenced from dispatcher.o(.constdata)
 <LI><a href="#[44]">[local to dispatcher_cpp]::OnSetDefault(const util::string&, int)</a> from dispatcher.o(.text) referenced from dispatcher.o(.constdata)
 <LI><a href="#[36]">[local to dispatcher_cpp]::OnWiringTest(const util::string&, int)</a> from dispatcher.o(.text) referenced from dispatcher.o(.constdata)
 <LI><a href="#[4b]">[local to dispatcher_cpp]::OnReadVoltage(const util::string&, int)</a> from dispatcher.o(.text) referenced from dispatcher.o(.constdata)
 <LI><a href="#[4d]">[local to dispatcher_cpp]::OnSetProtocol(const util::string&, int)</a> from dispatcher.o(.text) referenced 3 times from dispatcher.o(.constdata)
 <LI><a href="#[3c]">[local to dispatcher_cpp]::OnSetValueInt(const util::string&, int)</a> from dispatcher.o(.text) referenced 7 times from dispatcher.o(.constdata)
 <LI><a href="#[3b]">[local to dispatcher_cpp]::OnSetValueTrue(const util::string&, int)</a> from dispatcher.o(.text) referenced 13 times from dispatcher.o(.constdata)
 <LI><a href="#[42]">[local to dispatcher_cpp]::OnCanShowStatus(const util::string&, int)</a> from dispatcher.o(.text) referenced from dispatcher.o(.constdata)
 <LI><a href="#[4a]">[local to dispatcher_cpp]::OnProtocolClose(const util::string&, int)</a> from dispatcher.o(.text) referenced from dispatcher.o(.constdata)
 <LI><a href="#[3d]">[local to dispatcher_cpp]::OnSetValueFalse(const util::string&, int)</a> from dispatcher.o(.text) referenced 12 times from dispatcher.o(.constdata)
 <LI><a href="#[4c]">[local to dispatcher_cpp]::OnSet4HeaderBytes(const util::string&, int)</a> from dispatcher.o(.text) referenced from dispatcher.o(.constdata)
 <LI><a href="#[35]">[local to dispatcher_cpp]::OnAdapterSignature(const util::string&, int)</a> from dispatcher.o(.text) referenced from dispatcher.o(.constdata)
 <LI><a href="#[45]">[local to dispatcher_cpp]::OnProtocolDescribe(const util::string&, int)</a> from dispatcher.o(.text) referenced from dispatcher.o(.constdata)
 <LI><a href="#[38]">[local to dispatcher_cpp]::OnSendReplyVersion(const util::string&, int)</a> from dispatcher.o(.text) referenced from dispatcher.o(.constdata)
 <LI><a href="#[43]">[local to dispatcher_cpp]::OnCanSetTimeoutMult(const util::string&, int)</a> from dispatcher.o(.text) referenced from dispatcher.o(.constdata)
 <LI><a href="#[34]">[local to dispatcher_cpp]::OnSendReplyCopyright(const util::string&, int)</a> from dispatcher.o(.text) referenced from dispatcher.o(.constdata)
 <LI><a href="#[48]">[local to dispatcher_cpp]::OnSendReplyInterface(const util::string&, int)</a> from dispatcher.o(.text) referenced from dispatcher.o(.constdata)
 <LI><a href="#[40]">[local to dispatcher_cpp]::OnCanSetFilterAndMask(const util::string&, int)</a> from dispatcher.o(.text) referenced 4 times from dispatcher.o(.constdata)
 <LI><a href="#[46]">[local to dispatcher_cpp]::OnProtocolDescribeNum(const util::string&, int)</a> from dispatcher.o(.text) referenced from dispatcher.o(.constdata)
 <LI><a href="#[41]">[local to dispatcher_cpp]::OnCanSetReceiveAddress(const util::string&, int)</a> from dispatcher.o(.text) referenced 3 times from dispatcher.o(.constdata)
 <LI><a href="#[47]">[local to dispatcher_cpp]::OnCanSetFlowControlMode(const util::string&, int)</a> from dispatcher.o(.text) referenced from dispatcher.o(.constdata)
 <LI><a href="#[4e]">[local to dispatcher_cpp]::OnReset(const util::string&, int)</a> from dispatcher.o(.text) referenced 2 times from dispatcher.o(.constdata)
 <LI><a href="#[39]">[local to dispatcher_cpp]::OnSetOK(const util::string&, int)</a> from dispatcher.o(.text) referenced 17 times from dispatcher.o(.constdata)
 <LI><a href="#[31]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[2d]">AdptLED::TimerCallback()</a> from led.o(.text) referenced from led.o(.text)
 <LI><a href="#[2c]">CmdUart::~CmdUart()</a> from cmduartstm32f0xx.o(i._ZN7CmdUartD1Ev) referenced from cmduartstm32f0xx.o(.text)
 <LI><a href="#[2e]">MsgEntry::MsgEntry()</a> from isocan.o(i._ZN8MsgEntryC1Ev) referenced from isocan.o(.text)
 <LI><a href="#[2a]">ByteArray::ByteArray()</a> from adapterconfig.o(i._ZN9ByteArrayC1Ev) referenced from adapterconfig.o(.text)
 <LI><a href="#[58]">AutoAdapter::getProtocol() const</a> from autoadapter.o(i._ZNK11AutoAdapter11getProtocolEv) referenced from autoadapter.o(.constdata__ZTV11AutoAdapter)
 <LI><a href="#[63]">IsoCan11Adapter::getProtocol() const</a> from isocan.o(.text) referenced from isocan.o(.constdata__ZTV15IsoCan11Adapter)
 <LI><a href="#[65]">IsoCan11Adapter::getID() const</a> from isocan.o(.text) referenced from isocan.o(.constdata__ZTV15IsoCan11Adapter)
 <LI><a href="#[6b]">IsoCan29Adapter::getProtocol() const</a> from isocan.o(i._ZNK15IsoCan29Adapter11getProtocolEv) referenced from isocan.o(.constdata__ZTV15IsoCan29Adapter)
 <LI><a href="#[6d]">IsoCan29Adapter::getID() const</a> from isocan.o(.text) referenced from isocan.o(.constdata__ZTV15IsoCan29Adapter)
 <LI><a href="#[5a]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 6 times from isocan.o(.constdata__ZTV13IsoCanAdapter)
 <LI><a href="#[5a]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 7 times from padapter.o(.constdata__ZTV15ProtocolAdapter)
 <LI><a href="#[30]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f042.o(.text)
 <LI><a href="#[6f]">__sti___11_adapter_cpp_929dd7a5</a> from adapter.o(.text) referenced from adapter.o(.init_array)
 <LI><a href="#[70]">__sti___18_TimerSTM32F0xx_cpp_ac46811a</a> from timerstm32f0xx.o(.text) referenced from timerstm32f0xx.o(.init_array)
 <LI><a href="#[33]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[28]">main</a> from adapter.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[30]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(.text)
</UL>
<P><STRONG><a name="[140]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[72]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[139]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[141]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[74]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[142]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[143]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[144]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[75]"></a>__rt_final_cpp$nonempty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __rt_final_cpp$nonempty &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[145]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[7c]"></a>AdptSendString(const util::string&)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, adapter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AdptSendString(const util::string&) &rArr; CmdUart::send(const util::string&) &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdUart::send(const util::string&)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::onRequest(const DataCollector*)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(util::string&)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptOnCmd(const DataCollector*)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptDispatcherInit()
</UL>

<P><STRONG><a name="[28]"></a>main</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, adapter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = main &rArr; [local to adapter_cpp]::AdapterRun() &rArr; AdptOnCmd(const DataCollector*) &rArr; OBDProfile::onRequest(const DataCollector*) &rArr; OBDProfile::onRequestImpl(const DataCollector*) &rArr; OBDProfile::setProtocol(int, bool) &rArr; ProtocolAdapter::getAdapter(int) &rArr; IsoCanAdapter::IsoCanAdapter__sub_object() &rArr; ProtocolAdapter::ProtocolAdapter__sub_object() &rArr; AdapterConfig::instance() &rArr; AdapterConfig::AdapterConfig() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::configure()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDriver::configure()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdUart::configure()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptLED::configure()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::configure()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOConfigure(unsigned)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adapter_cpp]::AdapterRun()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[8d]"></a>AdapterConfig::AdapterConfig()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, adapterconfig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AdapterConfig::AdapterConfig() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::instance()
</UL>

<P><STRONG><a name="[146]"></a>AdapterConfig::AdapterConfig__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, adapterconfig.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>AdapterConfig::instance()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, adapterconfig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AdapterConfig::instance() &rArr; AdapterConfig::AdapterConfig() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::AdapterConfig()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(util::string&)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::SetDefault()
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnCanSetTimeoutMult(const util::string&, int)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSet4HeaderBytes(const util::string&, int)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSetProtocol(const util::string&, int)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnCanSetFlowControlMode(const util::string&, int)
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnCanSetReceiveAddress(const util::string&, int)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSetBytes(const util::string&, int)
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnResetBytes(const util::string&, int)
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSetValueInt(const util::string&, int)
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSetValueFalse(const util::string&, int)
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSetValueTrue(const util::string&, int)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_ascii(const unsigned char*, unsigned, util::string&)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIDToString(unsigned, util::string&, bool)
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adapter_cpp]::UserUartRcvHandler(unsigned char)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::onRequestImpl(const DataCollector*)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolAdapter::ProtocolAdapter__sub_object()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::CanReplyFormatter()
</UL>

<P><STRONG><a name="[91]"></a>AdapterConfig::setBoolProperty(int, bool)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, adapterconfig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AdapterConfig::setBoolProperty(int, bool) &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::SetDefault()
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSetProtocol(const util::string&, int)
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSetValueFalse(const util::string&, int)
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSetValueTrue(const util::string&, int)
</UL>

<P><STRONG><a name="[78]"></a>AdapterConfig::getBoolProperty(int) const</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, adapterconfig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AdapterConfig::getBoolProperty(int) const &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(util::string&)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_ascii(const unsigned char*, unsigned, util::string&)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIDToString(unsigned, util::string&, bool)
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adapter_cpp]::UserUartRcvHandler(unsigned char)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::onRequestImpl(const DataCollector*)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan29Adapter::getDescriptionNum()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan29Adapter::getDescription()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan11Adapter::processFlowFrame(const CanMsgBuffer*)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan11Adapter::getDescriptionNum()
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan11Adapter::getDescription()
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::onTryConnectEcu(bool)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::sendToEcu(const unsigned char*, int)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::getConfigKey()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyH1(const CanMsgBuffer*, unsigned, util::string&)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyCAF0(const CanMsgBuffer*, util::string&)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAdapter::getDescriptionNum()
</UL>

<P><STRONG><a name="[af]"></a>AdapterConfig::setIntProperty(int, unsigned)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, adapterconfig.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::SetDefault()
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnCanSetTimeoutMult(const util::string&, int)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSetProtocol(const util::string&, int)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnCanSetFlowControlMode(const util::string&, int)
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSetValueInt(const util::string&, int)
</UL>

<P><STRONG><a name="[10b]"></a>AdapterConfig::getIntProperty(int) const</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, adapterconfig.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan11Adapter::getProtocol() const
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan11Adapter::processFlowFrame(const CanMsgBuffer*)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::getP2MaxTimeout() const
</UL>

<P><STRONG><a name="[93]"></a>AdapterConfig::setBytesProperty(int, const ByteArray*)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, adapterconfig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AdapterConfig::setBytesProperty(int, const ByteArray*)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSet4HeaderBytes(const util::string&, int)
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnCanSetReceiveAddress(const util::string&, int)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSetBytes(const util::string&, int)
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnResetBytes(const util::string&, int)
</UL>

<P><STRONG><a name="[b5]"></a>AdapterConfig::getBytesProperty(int) const</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, adapterconfig.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnCanSetFlowControlMode(const util::string&, int)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan29Adapter::setFilterAndMask()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan29Adapter::getID() const
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan11Adapter::processFlowFrame(const CanMsgBuffer*)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan11Adapter::setFilterAndMask()
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan11Adapter::getID() const
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::sendToEcu(const unsigned char*, int)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::sendToEcuMF(const unsigned char*, int)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::receiveFromEcu(bool)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyNextFrame(const CanMsgBuffer*, int)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyFirstFrame(const CanMsgBuffer*)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::reply(const CanMsgBuffer*)
</UL>

<P><STRONG><a name="[95]"></a>AdapterConfig::clear()</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, adapterconfig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AdapterConfig::clear() &rArr; ByteArray::clear()
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteArray::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::SetDefault()
</UL>

<P><STRONG><a name="[7b]"></a>DataCollector::putChar(char)</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, datacollector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DataCollector::putChar(char) &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::operator +=(char)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adapter_cpp]::UserUartRcvHandler(unsigned char)
</UL>

<P><STRONG><a name="[8c]"></a>DataCollector::reset()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, datacollector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DataCollector::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adapter_cpp]::AdapterRun()
</UL>

<P><STRONG><a name="[9b]"></a>DataCollector::DataCollector()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, datacollector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DataCollector::DataCollector() &rArr; util::string::string(unsigned) &rArr; util::string::__init(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::string(unsigned)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCollector::instance()
</UL>

<P><STRONG><a name="[147]"></a>DataCollector::DataCollector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, datacollector.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>DataCollector::instance()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, datacollector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DataCollector::instance() &rArr; DataCollector::DataCollector() &rArr; util::string::string(unsigned) &rArr; util::string::__init(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCollector::DataCollector()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_adapter_cpp_929dd7a5
</UL>

<P><STRONG><a name="[9f]"></a>CanIDToString(unsigned, util::string&, bool)</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, functions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CanIDToString(unsigned, util::string&, bool) &rArr; util::string::operator +=(char) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::to_ascii(unsigned char)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::operator +=(char)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::getBoolProperty(int) const
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanHistory::dumpCurrentBuffer()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyFirstFrameH0(const CanMsgBuffer*, unsigned, unsigned, util::string&)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyH1(const CanMsgBuffer*, unsigned, util::string&)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyCAF0(const CanMsgBuffer*, util::string&)
</UL>

<P><STRONG><a name="[a1]"></a>Delay1ms(unsigned)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, functions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Delay1ms(unsigned) &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::sendToEcuMF(const unsigned char*, int)
</UL>

<P><STRONG><a name="[a3]"></a>Delay1us(unsigned)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, functions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Delay1us(unsigned) &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::wiringCheck()
</UL>

<P><STRONG><a name="[a4]"></a>to_bytes(const util::string&, unsigned char*)</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, functions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = to_bytes(const util::string&, unsigned char*) &rArr; util::stoul(const util::string&, unsigned*, int) &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::substr(unsigned, unsigned) const
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::stoul(const util::string&, unsigned*, int)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::~string()
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSet4HeaderBytes(const util::string&, int)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSetBytes(const util::string&, int)
</UL>

<P><STRONG><a name="[a8]"></a>to_ascii(const unsigned char*, unsigned, util::string&)</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, functions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = to_ascii(const unsigned char*, unsigned, util::string&) &rArr; util::string::operator +=(char) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::to_ascii(unsigned char)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::operator +=(char)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::getBoolProperty(int) const
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanHistory::dumpCurrentBuffer()
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyNextFrameH0(const CanMsgBuffer*, unsigned, unsigned, int, util::string&)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyFirstFrameH0(const CanMsgBuffer*, unsigned, unsigned, util::string&)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyH0(const CanMsgBuffer*, unsigned, unsigned, util::string&)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyH1(const CanMsgBuffer*, unsigned, util::string&)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyCAF0(const CanMsgBuffer*, util::string&)
</UL>

<P><STRONG><a name="[a9]"></a>AutoReceiveParse(const util::string&, unsigned&, unsigned&)</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, functions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AutoReceiveParse(const util::string&, unsigned&, unsigned&) &rArr; util::stoul(const util::string&, unsigned*, int) &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::substr(unsigned, unsigned) const
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::stoul(const util::string&, unsigned*, int)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::~string()
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnCanSetReceiveAddress(const util::string&, int)
</UL>

<P><STRONG><a name="[aa]"></a>AdptSendReply(util::string&)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AdptSendReply(util::string&) &rArr; util::string::operator +=(const char*) &rArr; util::string::append(const char*) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::operator +=(const char*)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::getBoolProperty(int) const
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::instance()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendString(const util::string&)
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const util::string&)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanHistory::dumpCurrentBuffer()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyNextFrame(const CanMsgBuffer*, int)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyFirstFrame(const CanMsgBuffer*)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyFirstFrameH0(const CanMsgBuffer*, unsigned, unsigned, util::string&)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::reply(const CanMsgBuffer*)
</UL>

<P><STRONG><a name="[ac]"></a>AdptSendReply(const char*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = AdptSendReply(const char*) &rArr; AdptSendReply(util::string&) &rArr; util::string::operator +=(const char*) &rArr; util::string::append(const char*) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(util::string&)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::operator =(const char*)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::~string()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::string(unsigned)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::onRequest(const DataCollector*)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::ParseSTCmd(const util::string&)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnReset(const util::string&, int)
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSetDefault(const util::string&, int)
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnCanSetTimeoutMult(const util::string&, int)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSet4HeaderBytes(const util::string&, int)
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSendReplyInterface(const util::string&, int)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSetProtocol(const util::string&, int)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnReadVoltage(const util::string&, int)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnProtocolClose(const util::string&, int)
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSendReplyVersion(const util::string&, int)
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnAdapterSignature(const util::string&, int)
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSendReplyCopyright(const util::string&, int)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnCanSetFlowControlMode(const util::string&, int)
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnCanSetReceiveAddress(const util::string&, int)
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSetOK(const util::string&, int)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSetBytes(const util::string&, int)
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnResetBytes(const util::string&, int)
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSetValueInt(const util::string&, int)
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSetValueFalse(const util::string&, int)
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSetValueTrue(const util::string&, int)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptOnCmd(const DataCollector*)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptDispatcherInit()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan29Adapter::getDescriptionNum()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan29Adapter::getDescription()
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan11Adapter::getDescriptionNum()
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan11Adapter::getDescription()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::wiringCheck()
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAdapter::getDescriptionNum()
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAdapter::getDescription()
</UL>

<P><STRONG><a name="[8b]"></a>AdptOnCmd(const DataCollector*)</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = AdptOnCmd(const DataCollector*) &rArr; OBDProfile::onRequest(const DataCollector*) &rArr; OBDProfile::onRequestImpl(const DataCollector*) &rArr; OBDProfile::setProtocol(int, bool) &rArr; ProtocolAdapter::getAdapter(int) &rArr; IsoCanAdapter::IsoCanAdapter__sub_object() &rArr; ProtocolAdapter::ProtocolAdapter__sub_object() &rArr; AdapterConfig::instance() &rArr; AdapterConfig::AdapterConfig() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::operator ==(const util::string&, const char*)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::operator =(util::string&&)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::string(const char*)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::onRequest(const DataCollector*)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::instance()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::ParseSTCmd(const util::string&)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::DispatchATCmd(const util::string&, int, bool)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::substr(unsigned, unsigned) const
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::~string()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::string(unsigned)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendString(const util::string&)
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adapter_cpp]::AdapterRun()
</UL>

<P><STRONG><a name="[8a]"></a>AdptDispatcherInit()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AdptDispatcherInit() &rArr; [local to dispatcher_cpp]::OnReset(const util::string&, int) &rArr; [local to dispatcher_cpp]::SetDefault() &rArr; OBDProfile::instance() &rArr; OBDProfile::OBDProfile() &rArr; ProtocolAdapter::getAdapter(int) &rArr; IsoCanAdapter::IsoCanAdapter__sub_object() &rArr; ProtocolAdapter::ProtocolAdapter__sub_object() &rArr; AdapterConfig::instance() &rArr; AdapterConfig::AdapterConfig() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::string(const char*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnReset(const util::string&, int)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::~string()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendString(const util::string&)
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adapter_cpp]::AdapterRun()
</UL>

<P><STRONG><a name="[c6]"></a>AdptSendReply(const util::string&)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = AdptSendReply(const util::string&) &rArr; AdptSendReply(util::string&) &rArr; util::string::operator +=(const char*) &rArr; util::string::append(const char*) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::operator =(const util::string&)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(util::string&)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::~string()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::string(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptReadSerialNum()
</UL>

<P><STRONG><a name="[84]"></a>AdcDriver::configure()</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, adcstm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = AdcDriver::configure() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLKConfig
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>AdcDriver::read()</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, adcstm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AdcDriver::read()
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StopOfConversion
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartOfConversion
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationFactor
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnReadVoltage(const util::string&, int)
</UL>

<P><STRONG><a name="[26]"></a>CEC_CAN_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, candriverstm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CEC_CAN_IRQHandler &rArr; AdptLED::instance() &rArr; AdptLED::AdptLED() &rArr; PeriodicTimer::PeriodicTimer(void(*)()) &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptLED::instance()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptLED::blinkRx()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>CanDriver::CanDriver()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, candriverstm32f0xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::instance()
</UL>

<P><STRONG><a name="[148]"></a>CanDriver::CanDriver__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, candriverstm32f0xx.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>CanDriver::instance()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, candriverstm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CanDriver::instance()
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::CanDriver()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::IsoCanAdapter__sub_object()
</UL>

<P><STRONG><a name="[82]"></a>CanDriver::configure()</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, candriverstm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CanDriver::configure() &rArr; [local to CanDriverSTM32F0xx_cpp]::configureCANPins() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_StructInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to CanDriverSTM32F0xx_cpp]::configureCANPins()
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>CanDriver::send(const CanMsgBuffer*)</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, candriverstm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CanDriver::send(const CanMsgBuffer*) &rArr; AdptLED::instance() &rArr; AdptLED::AdptLED() &rArr; PeriodicTimer::PeriodicTimer(void(*)()) &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptLED::instance()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptLED::blinkTx()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan29Adapter::processFlowFrame(const CanMsgBuffer*)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan11Adapter::processFlowFrame(const CanMsgBuffer*)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::onTryConnectEcu(bool)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::sendFrameToEcu(const unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[11b]"></a>CanDriver::setFilterAndMask(unsigned, unsigned, bool)</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, candriverstm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CanDriver::setFilterAndMask(unsigned, unsigned, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan29Adapter::setFilterAndMask()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan11Adapter::setFilterAndMask()
</UL>

<P><STRONG><a name="[10f]"></a>CanDriver::isReady() const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, candriverstm32f0xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::receiveControlFrame(unsigned char&, unsigned char&, unsigned char&)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::receiveFromEcu(bool)
</UL>

<P><STRONG><a name="[e2]"></a>CanDriver::read(CanMsgBuffer*)</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, candriverstm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CanDriver::read(CanMsgBuffer*)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::receiveControlFrame(unsigned char&, unsigned char&, unsigned char&)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::receiveFromEcu(bool)
</UL>

<P><STRONG><a name="[e3]"></a>CanDriver::setBitBang(bool)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, candriverstm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CanDriver::setBitBang(bool) &rArr; [local to CanDriverSTM32F0xx_cpp]::configureCANPins() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetDir(unsigned, unsigned, unsigned)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to CanDriverSTM32F0xx_cpp]::configureCANPins()
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::wiringCheck()
</UL>

<P><STRONG><a name="[e5]"></a>CanDriver::setBit(unsigned)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, candriverstm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CanDriver::setBit(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite(unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::wiringCheck()
</UL>

<P><STRONG><a name="[e7]"></a>CanDriver::getBit()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, candriverstm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CanDriver::getBit()
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::wiringCheck()
</UL>

<P><STRONG><a name="[e9]"></a>CmdUart::CmdUart()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cmduartstm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CmdUart::CmdUart() &rArr; util::string::string(unsigned) &rArr; util::string::__init(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::string(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdUart::instance()
</UL>

<P><STRONG><a name="[149]"></a>CmdUart::CmdUart__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, cmduartstm32f0xx.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>CmdUart::instance()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cmduartstm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CmdUart::instance() &rArr; CmdUart::CmdUart() &rArr; util::string::string(unsigned) &rArr; util::string::__init(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdUart::CmdUart()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adapter_cpp]::AdapterRun()
</UL>

<P><STRONG><a name="[ed]"></a>CmdUart::rxIrqHandler()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cmduartstm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdUart::rxIrqHandler()
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdUart::irqHandler()
</UL>

<P><STRONG><a name="[ea]"></a>CmdUart::txIrqHandler()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, cmduartstm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdUart::txIrqHandler() &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdUart::irqHandler()
</UL>

<P><STRONG><a name="[ec]"></a>CmdUart::irqHandler()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cmduartstm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CmdUart::irqHandler() &rArr; CmdUart::txIrqHandler() &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdUart::txIrqHandler()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdUart::rxIrqHandler()
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[25]"></a>USART2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmduartstm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USART2_IRQHandler &rArr; CmdUart::instance() &rArr; CmdUart::CmdUart() &rArr; util::string::string(unsigned) &rArr; util::string::__init(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdUart::irqHandler()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdUart::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>CmdUart::configure()</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, cmduartstm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CmdUart::configure() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>CmdUart::init(unsigned)</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, cmduartstm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CmdUart::init(unsigned) &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adapter_cpp]::AdapterRun()
</UL>

<P><STRONG><a name="[79]"></a>CmdUart::send(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmduartstm32f0xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdUart::send(const util::string&)
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adapter_cpp]::UserUartRcvHandler(unsigned char)
</UL>

<P><STRONG><a name="[7d]"></a>CmdUart::send(const util::string&)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, cmduartstm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CmdUart::send(const util::string&) &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdUart::send(unsigned char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendString(const util::string&)
</UL>

<P><STRONG><a name="[b7]"></a>AdptReadSerialNum()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sysutilitystm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = AdptReadSerialNum() &rArr; [local to SysutilitySTM32F0xx_cpp]::UIDToString(unsigned*) &rArr; util::string::operator +=(char) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to SysutilitySTM32F0xx_cpp]::UIDToString(unsigned*)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const util::string&)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::~string()
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnGetSerial(const util::string&, int)
</UL>

<P><STRONG><a name="[89]"></a>AdptPowerModeConfigure()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sysutilitystm32f0xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adapter_cpp]::AdapterRun()
</UL>

<P><STRONG><a name="[80]"></a>GPIOConfigure(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpiodrvstm32f0xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>GPIOSetDir(unsigned, unsigned, unsigned)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gpiodrvstm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIOSetDir(unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::setBitBang(bool)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptLED::configure()
</UL>

<P><STRONG><a name="[e6]"></a>GPIOPinWrite(unsigned, unsigned, unsigned)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gpiodrvstm32f0xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptLED::blinkTx()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptLED::blinkRx()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::setBit(unsigned)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptLED::configure()
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptLED::TimerCallback()
</UL>

<P><STRONG><a name="[e8]"></a>GPIOPinRead(unsigned, unsigned)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpiodrvstm32f0xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::getBit()
</UL>

<P><STRONG><a name="[1f]"></a>TIM16_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, timerstm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>Timer::configure()</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timerstm32f0xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f1]"></a>Timer::Timer(int)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, timerstm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Timer::Timer(int) &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::instance(int)
</UL>

<P><STRONG><a name="[14a]"></a>Timer::Timer__sub_object(int)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, timerstm32f0xx.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>Timer::instance(int)</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, timerstm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Timer::instance(int) &rArr; Timer::Timer(int) &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer(int)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::receiveControlFrame(unsigned char&, unsigned char&, unsigned char&)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::receiveFromEcu(bool)
</UL>

<P><STRONG><a name="[10e]"></a>Timer::start(unsigned)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, timerstm32f0xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::receiveControlFrame(unsigned char&, unsigned char&, unsigned char&)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::receiveFromEcu(bool)
</UL>

<P><STRONG><a name="[111]"></a>Timer::isExpired() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timerstm32f0xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::receiveControlFrame(unsigned char&, unsigned char&, unsigned char&)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::receiveFromEcu(bool)
</UL>

<P><STRONG><a name="[f4]"></a>PeriodicTimer::PeriodicTimer(void(*)())</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, timerstm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PeriodicTimer::PeriodicTimer(void(*)()) &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptLED::AdptLED()
</UL>

<P><STRONG><a name="[14b]"></a>PeriodicTimer::PeriodicTimer__sub_object(void(*)())</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, timerstm32f0xx.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>PeriodicTimer::start(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timerstm32f0xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptLED::startTimer()
</UL>

<P><STRONG><a name="[83]"></a>AdptLED::configure()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AdptLED::configure() &rArr; GPIOSetDir(unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite(unsigned, unsigned, unsigned)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetDir(unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d]"></a>AdptLED::TimerCallback()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AdptLED::TimerCallback()
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite(unsigned, unsigned, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.text)
</UL>
<P><STRONG><a name="[f5]"></a>AdptLED::AdptLED()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AdptLED::AdptLED() &rArr; PeriodicTimer::PeriodicTimer(void(*)()) &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriodicTimer::PeriodicTimer(void(*)())
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptLED::instance()
</UL>

<P><STRONG><a name="[14c]"></a>AdptLED::AdptLED__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, led.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>AdptLED::instance()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AdptLED::instance() &rArr; AdptLED::AdptLED() &rArr; PeriodicTimer::PeriodicTimer(void(*)()) &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptLED::AdptLED()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::send(const CanMsgBuffer*)
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CEC_CAN_IRQHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan29Adapter::open()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan11Adapter::open()
</UL>

<P><STRONG><a name="[f7]"></a>AdptLED::startTimer()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AdptLED::startTimer()
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriodicTimer::start(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan29Adapter::open()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan11Adapter::open()
</UL>

<P><STRONG><a name="[e0]"></a>AdptLED::blinkTx()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AdptLED::blinkTx()
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite(unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::send(const CanMsgBuffer*)
</UL>

<P><STRONG><a name="[d5]"></a>AdptLED::blinkRx()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AdptLED::blinkRx()
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite(unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CEC_CAN_IRQHandler
</UL>

<P><STRONG><a name="[ca]"></a>GPIO_Init</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, stm32f0xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to CanDriverSTM32F0xx_cpp]::configureCANPins()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDriver::configure()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdUart::configure()
</UL>

<P><STRONG><a name="[d9]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f0xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::configure()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdUart::configure()
</UL>

<P><STRONG><a name="[c8]"></a>RCC_PCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDriver::configure()
</UL>

<P><STRONG><a name="[f9]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, stm32f0xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[c9]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDriver::configure()
</UL>

<P><STRONG><a name="[fa]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
</UL>

<P><STRONG><a name="[f2]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f0xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriodicTimer::PeriodicTimer(void(*)())
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer(int)
</UL>

<P><STRONG><a name="[ee]"></a>USART_Init</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, stm32f0xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdUart::init(unsigned)
</UL>

<P><STRONG><a name="[eb]"></a>USART_ITConfig</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f0xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdUart::txIrqHandler()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdUart::send(const util::string&)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdUart::init(unsigned)
</UL>

<P><STRONG><a name="[db]"></a>CAN_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f0xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::configure()
</UL>

<P><STRONG><a name="[dd]"></a>CAN_Init</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, stm32f0xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::configure()
</UL>

<P><STRONG><a name="[dc]"></a>CAN_StructInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f0xx_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::configure()
</UL>

<P><STRONG><a name="[e1]"></a>CAN_Transmit</STRONG> (Thumb, 142 bytes, Stack size 12 bytes, stm32f0xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::send(const CanMsgBuffer*)
</UL>

<P><STRONG><a name="[d6]"></a>CAN_Receive</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, stm32f0xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CEC_CAN_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>CAN_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::read(CanMsgBuffer*)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::configure()
</UL>

<P><STRONG><a name="[cc]"></a>ADC_Init</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f0xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDriver::configure()
</UL>

<P><STRONG><a name="[cb]"></a>ADC_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDriver::configure()
</UL>

<P><STRONG><a name="[cf]"></a>ADC_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDriver::read()
</UL>

<P><STRONG><a name="[cd]"></a>ADC_ChannelConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDriver::configure()
</UL>

<P><STRONG><a name="[ce]"></a>ADC_GetCalibrationFactor</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDriver::read()
</UL>

<P><STRONG><a name="[d3]"></a>ADC_StopOfConversion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDriver::read()
</UL>

<P><STRONG><a name="[d0]"></a>ADC_StartOfConversion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDriver::read()
</UL>

<P><STRONG><a name="[d2]"></a>ADC_GetConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDriver::read()
</UL>

<P><STRONG><a name="[d1]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDriver::read()
</UL>

<P><STRONG><a name="[fb]"></a>AutoAdapter::doConnect(int, bool)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, autoadapter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AutoAdapter::doConnect(int, bool) &rArr; ProtocolAdapter::getAdapter(int) &rArr; IsoCanAdapter::IsoCanAdapter__sub_object() &rArr; ProtocolAdapter::ProtocolAdapter__sub_object() &rArr; AdapterConfig::instance() &rArr; AdapterConfig::AdapterConfig() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolAdapter::getAdapter(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAdapter::onTryConnectEcu(bool)
</UL>

<P><STRONG><a name="[50]"></a>AutoAdapter::onTryConnectEcu(bool)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, autoadapter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AutoAdapter::onTryConnectEcu(bool) &rArr; AutoAdapter::doConnect(int, bool) &rArr; ProtocolAdapter::getAdapter(int) &rArr; IsoCanAdapter::IsoCanAdapter__sub_object() &rArr; ProtocolAdapter::ProtocolAdapter__sub_object() &rArr; AdapterConfig::instance() &rArr; AdapterConfig::AdapterConfig() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAdapter::doConnect(int, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autoadapter.o(.constdata__ZTV11AutoAdapter)
</UL>
<P><STRONG><a name="[51]"></a>AutoAdapter::onRequest(const unsigned char*, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, autoadapter.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> autoadapter.o(.constdata__ZTV11AutoAdapter)
</UL>
<P><STRONG><a name="[52]"></a>AutoAdapter::getDescription()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, autoadapter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = AutoAdapter::getDescription() &rArr; AdptSendReply(const char*) &rArr; AdptSendReply(util::string&) &rArr; util::string::operator +=(const char*) &rArr; util::string::append(const char*) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autoadapter.o(.constdata__ZTV11AutoAdapter)
</UL>
<P><STRONG><a name="[53]"></a>AutoAdapter::getDescriptionNum()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, autoadapter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = AutoAdapter::getDescriptionNum() &rArr; AdptSendReply(const char*) &rArr; AdptSendReply(util::string&) &rArr; util::string::operator +=(const char*) &rArr; util::string::append(const char*) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::getBoolProperty(int) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autoadapter.o(.constdata__ZTV11AutoAdapter)
</UL>
<P><STRONG><a name="[fd]"></a>CanReplyFormatter::CanReplyFormatter()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, canformatter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CanReplyFormatter::CanReplyFormatter() &rArr; AdapterConfig::instance() &rArr; AdapterConfig::AdapterConfig() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::IsoCanAdapter__sub_object()
</UL>

<P><STRONG><a name="[14d]"></a>CanReplyFormatter::CanReplyFormatter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, canformatter.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>CanReplyFormatter::replyCAF0(const CanMsgBuffer*, util::string&)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, canformatter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CanReplyFormatter::replyCAF0(const CanMsgBuffer*, util::string&) &rArr; to_ascii(const unsigned char*, unsigned, util::string&) &rArr; util::string::operator +=(char) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_ascii(const unsigned char*, unsigned, util::string&)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIDToString(unsigned, util::string&, bool)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::operator +=(char)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::getBoolProperty(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyNextFrame(const CanMsgBuffer*, int)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyFirstFrame(const CanMsgBuffer*)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::reply(const CanMsgBuffer*)
</UL>

<P><STRONG><a name="[ff]"></a>CanReplyFormatter::replyH1(const CanMsgBuffer*, unsigned, util::string&)</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, canformatter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = CanReplyFormatter::replyH1(const CanMsgBuffer*, unsigned, util::string&) &rArr; to_ascii(const unsigned char*, unsigned, util::string&) &rArr; util::string::operator +=(char) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_ascii(const unsigned char*, unsigned, util::string&)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIDToString(unsigned, util::string&, bool)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::operator +=(char)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::getBoolProperty(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyNextFrame(const CanMsgBuffer*, int)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyFirstFrame(const CanMsgBuffer*)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::reply(const CanMsgBuffer*)
</UL>

<P><STRONG><a name="[100]"></a>CanReplyFormatter::replyH0(const CanMsgBuffer*, unsigned, unsigned, util::string&)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, canformatter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = CanReplyFormatter::replyH0(const CanMsgBuffer*, unsigned, unsigned, util::string&) &rArr; to_ascii(const unsigned char*, unsigned, util::string&) &rArr; util::string::operator +=(char) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_ascii(const unsigned char*, unsigned, util::string&)
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::reply(const CanMsgBuffer*)
</UL>

<P><STRONG><a name="[101]"></a>CanReplyFormatter::getConfigKey()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, canformatter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CanReplyFormatter::getConfigKey() &rArr; AdapterConfig::getBoolProperty(int) const &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::getBoolProperty(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyNextFrame(const CanMsgBuffer*, int)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyFirstFrame(const CanMsgBuffer*)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::reply(const CanMsgBuffer*)
</UL>

<P><STRONG><a name="[102]"></a>CanReplyFormatter::reply(const CanMsgBuffer*)</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, canformatter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = CanReplyFormatter::reply(const CanMsgBuffer*) &rArr; CanReplyFormatter::replyH1(const CanMsgBuffer*, unsigned, util::string&) &rArr; to_ascii(const unsigned char*, unsigned, util::string&) &rArr; util::string::operator +=(char) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(util::string&)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::~string()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::string(unsigned)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::getBytesProperty(int) const
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::getConfigKey()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyH0(const CanMsgBuffer*, unsigned, unsigned, util::string&)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyH1(const CanMsgBuffer*, unsigned, util::string&)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyCAF0(const CanMsgBuffer*, util::string&)
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::receiveFromEcu(bool)
</UL>

<P><STRONG><a name="[103]"></a>CanReplyFormatter::replyFirstFrameH0(const CanMsgBuffer*, unsigned, unsigned, util::string&)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, canformatter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CanReplyFormatter::replyFirstFrameH0(const CanMsgBuffer*, unsigned, unsigned, util::string&) &rArr; to_ascii(const unsigned char*, unsigned, util::string&) &rArr; util::string::operator +=(char) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(util::string&)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::operator =(const char*)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_ascii(const unsigned char*, unsigned, util::string&)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIDToString(unsigned, util::string&, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyFirstFrame(const CanMsgBuffer*)
</UL>

<P><STRONG><a name="[104]"></a>CanReplyFormatter::replyFirstFrame(const CanMsgBuffer*)</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, canformatter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = CanReplyFormatter::replyFirstFrame(const CanMsgBuffer*) &rArr; CanReplyFormatter::replyH1(const CanMsgBuffer*, unsigned, util::string&) &rArr; to_ascii(const unsigned char*, unsigned, util::string&) &rArr; util::string::operator +=(char) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(util::string&)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::~string()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::string(unsigned)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::getBytesProperty(int) const
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyFirstFrameH0(const CanMsgBuffer*, unsigned, unsigned, util::string&)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::getConfigKey()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyH1(const CanMsgBuffer*, unsigned, util::string&)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyCAF0(const CanMsgBuffer*, util::string&)
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::receiveFromEcu(bool)
</UL>

<P><STRONG><a name="[105]"></a>CanReplyFormatter::replyNextFrameH0(const CanMsgBuffer*, unsigned, unsigned, int, util::string&)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, canformatter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = CanReplyFormatter::replyNextFrameH0(const CanMsgBuffer*, unsigned, unsigned, int, util::string&) &rArr; to_ascii(const unsigned char*, unsigned, util::string&) &rArr; util::string::operator +=(char) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::operator =(const char*)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_ascii(const unsigned char*, unsigned, util::string&)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyNextFrame(const CanMsgBuffer*, int)
</UL>

<P><STRONG><a name="[106]"></a>CanReplyFormatter::replyNextFrame(const CanMsgBuffer*, int)</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, canformatter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = CanReplyFormatter::replyNextFrame(const CanMsgBuffer*, int) &rArr; CanReplyFormatter::replyH1(const CanMsgBuffer*, unsigned, util::string&) &rArr; to_ascii(const unsigned char*, unsigned, util::string&) &rArr; util::string::operator +=(char) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(util::string&)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::~string()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::string(unsigned)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::getBytesProperty(int) const
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyNextFrameH0(const CanMsgBuffer*, unsigned, unsigned, int, util::string&)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::getConfigKey()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyH1(const CanMsgBuffer*, unsigned, util::string&)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyCAF0(const CanMsgBuffer*, util::string&)
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::receiveFromEcu(bool)
</UL>

<P><STRONG><a name="[107]"></a>CanHistory::dumpCurrentBuffer()</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, canhistory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = CanHistory::dumpCurrentBuffer() &rArr; to_ascii(const unsigned char*, unsigned, util::string&) &rArr; util::string::operator +=(char) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::operator +=(const char*)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(util::string&)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_ascii(const unsigned char*, unsigned, util::string&)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIDToString(unsigned, util::string&, bool)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::operator +=(char)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::~string()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::string(unsigned)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::resize(unsigned)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::resize(unsigned, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::dumpBuffer()
</UL>

<P><STRONG><a name="[109]"></a>CanHistory::add2Buffer(const CanMsgBuffer*, bool, unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, canhistory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CanHistory::add2Buffer(const CanMsgBuffer*, bool, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan29Adapter::processFlowFrame(const CanMsgBuffer*)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan11Adapter::processFlowFrame(const CanMsgBuffer*)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::receiveControlFrame(unsigned char&, unsigned char&, unsigned char&)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::sendFrameToEcu(const unsigned char*, unsigned char, unsigned char)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::receiveFromEcu(bool)
</UL>

<P><STRONG><a name="[110]"></a>IsoCanAdapter::checkResponsePending(const CanMsgBuffer*)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, isocan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::receiveFromEcu(bool)
</UL>

<P><STRONG><a name="[10a]"></a>IsoCanAdapter::getP2MaxTimeout() const</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, isocan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsoCanAdapter::getP2MaxTimeout() const
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::getIntProperty(int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::receiveControlFrame(unsigned char&, unsigned char&, unsigned char&)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::receiveFromEcu(bool)
</UL>

<P><STRONG><a name="[10c]"></a>IsoCanAdapter::receiveFromEcu(bool)</STRONG> (Thumb, 230 bytes, Stack size 56 bytes, isocan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = IsoCanAdapter::receiveFromEcu(bool) &rArr; CanReplyFormatter::replyNextFrame(const CanMsgBuffer*, int) &rArr; CanReplyFormatter::replyH1(const CanMsgBuffer*, unsigned, util::string&) &rArr; to_ascii(const unsigned char*, unsigned, util::string&) &rArr; util::string::operator +=(char) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::read(CanMsgBuffer*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::isReady() const
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::getBytesProperty(int) const
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::isExpired() const
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::start(unsigned)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::instance(int)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMsgBuffer::CanMsgBuffer()
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::getP2MaxTimeout() const
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::checkResponsePending(const CanMsgBuffer*)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanHistory::add2Buffer(const CanMsgBuffer*, bool, unsigned char)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyNextFrame(const CanMsgBuffer*, int)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyFirstFrame(const CanMsgBuffer*)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::reply(const CanMsgBuffer*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::onTryConnectEcu(bool)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::onRequest(const unsigned char*, int)
</UL>

<P><STRONG><a name="[112]"></a>IsoCanAdapter::sendFrameToEcu(const unsigned char*, unsigned char, unsigned char)</STRONG> (Thumb, 94 bytes, Stack size 72 bytes, isocan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IsoCanAdapter::sendFrameToEcu(const unsigned char*, unsigned char, unsigned char) &rArr; CanDriver::send(const CanMsgBuffer*) &rArr; AdptLED::instance() &rArr; AdptLED::AdptLED() &rArr; PeriodicTimer::PeriodicTimer(void(*)()) &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::send(const CanMsgBuffer*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMsgBuffer::CanMsgBuffer(unsigned, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanHistory::add2Buffer(const CanMsgBuffer*, bool, unsigned char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::sendToEcu(const unsigned char*, int)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::sendToEcuMF(const unsigned char*, int)
</UL>

<P><STRONG><a name="[114]"></a>IsoCanAdapter::receiveControlFrame(unsigned char&, unsigned char&, unsigned char&)</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, isocan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = IsoCanAdapter::receiveControlFrame(unsigned char&, unsigned char&, unsigned char&) &rArr; Timer::instance(int) &rArr; Timer::Timer(int) &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::read(CanMsgBuffer*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::isReady() const
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::isExpired() const
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::start(unsigned)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::instance(int)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMsgBuffer::CanMsgBuffer()
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::getP2MaxTimeout() const
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanHistory::add2Buffer(const CanMsgBuffer*, bool, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::sendToEcuMF(const unsigned char*, int)
</UL>

<P><STRONG><a name="[115]"></a>IsoCanAdapter::sendToEcuMF(const unsigned char*, int)</STRONG> (Thumb, 300 bytes, Stack size 80 bytes, isocan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = IsoCanAdapter::sendToEcuMF(const unsigned char*, int) &rArr; IsoCanAdapter::sendFrameToEcu(const unsigned char*, unsigned char, unsigned char) &rArr; CanDriver::send(const CanMsgBuffer*) &rArr; AdptLED::instance() &rArr; AdptLED::AdptLED() &rArr; PeriodicTimer::PeriodicTimer(void(*)()) &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1ms(unsigned)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::getBytesProperty(int) const
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::receiveControlFrame(unsigned char&, unsigned char&, unsigned char&)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::sendFrameToEcu(const unsigned char*, unsigned char, unsigned char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::sendToEcu(const unsigned char*, int)
</UL>

<P><STRONG><a name="[117]"></a>IsoCanAdapter::sendToEcu(const unsigned char*, int)</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, isocan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = IsoCanAdapter::sendToEcu(const unsigned char*, int) &rArr; IsoCanAdapter::sendToEcuMF(const unsigned char*, int) &rArr; IsoCanAdapter::sendFrameToEcu(const unsigned char*, unsigned char, unsigned char) &rArr; CanDriver::send(const CanMsgBuffer*) &rArr; AdptLED::instance() &rArr; AdptLED::AdptLED() &rArr; PeriodicTimer::PeriodicTimer(void(*)()) &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::getBytesProperty(int) const
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::getBoolProperty(int) const
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::sendToEcuMF(const unsigned char*, int)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::sendFrameToEcu(const unsigned char*, unsigned char, unsigned char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::onRequest(const unsigned char*, int)
</UL>

<P><STRONG><a name="[5c]"></a>IsoCanAdapter::onRequest(const unsigned char*, int)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, isocan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = IsoCanAdapter::onRequest(const unsigned char*, int) &rArr; IsoCanAdapter::sendToEcu(const unsigned char*, int) &rArr; IsoCanAdapter::sendToEcuMF(const unsigned char*, int) &rArr; IsoCanAdapter::sendFrameToEcu(const unsigned char*, unsigned char, unsigned char) &rArr; CanDriver::send(const CanMsgBuffer*) &rArr; AdptLED::instance() &rArr; AdptLED::AdptLED() &rArr; PeriodicTimer::PeriodicTimer(void(*)()) &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::sendToEcu(const unsigned char*, int)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::receiveFromEcu(bool)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> isocan.o(.constdata__ZTV13IsoCanAdapter)
<LI> isocan.o(.constdata__ZTV15IsoCan11Adapter)
<LI> isocan.o(.constdata__ZTV15IsoCan29Adapter)
</UL>
<P><STRONG><a name="[5b]"></a>IsoCanAdapter::onTryConnectEcu(bool)</STRONG> (Thumb, 148 bytes, Stack size 80 bytes, isocan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = IsoCanAdapter::onTryConnectEcu(bool) &rArr; IsoCanAdapter::receiveFromEcu(bool) &rArr; CanReplyFormatter::replyNextFrame(const CanMsgBuffer*, int) &rArr; CanReplyFormatter::replyH1(const CanMsgBuffer*, unsigned, util::string&) &rArr; to_ascii(const unsigned char*, unsigned, util::string&) &rArr; util::string::operator +=(char) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::send(const CanMsgBuffer*)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::getBoolProperty(int) const
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMsgBuffer::CanMsgBuffer(unsigned, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::receiveFromEcu(bool)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> isocan.o(.constdata__ZTV13IsoCanAdapter)
<LI> isocan.o(.constdata__ZTV15IsoCan11Adapter)
<LI> isocan.o(.constdata__ZTV15IsoCan29Adapter)
</UL>
<P><STRONG><a name="[5e]"></a>IsoCanAdapter::wiringCheck()</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, isocan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = IsoCanAdapter::wiringCheck() &rArr; AdptSendReply(const char*) &rArr; AdptSendReply(util::string&) &rArr; util::string::operator +=(const char*) &rArr; util::string::append(const char*) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::getBit()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::setBit(unsigned)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::setBitBang(bool)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1us(unsigned)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> isocan.o(.constdata__ZTV13IsoCanAdapter)
<LI> isocan.o(.constdata__ZTV15IsoCan11Adapter)
<LI> isocan.o(.constdata__ZTV15IsoCan29Adapter)
</UL>
<P><STRONG><a name="[5d]"></a>IsoCanAdapter::dumpBuffer()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, isocan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = IsoCanAdapter::dumpBuffer() &rArr; CanHistory::dumpCurrentBuffer() &rArr; to_ascii(const unsigned char*, unsigned, util::string&) &rArr; util::string::operator +=(char) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanHistory::dumpCurrentBuffer()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> isocan.o(.constdata__ZTV13IsoCanAdapter)
<LI> isocan.o(.constdata__ZTV15IsoCan11Adapter)
<LI> isocan.o(.constdata__ZTV15IsoCan29Adapter)
</UL>
<P><STRONG><a name="[118]"></a>IsoCanAdapter::IsoCanAdapter__sub_object()</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, isocan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IsoCanAdapter::IsoCanAdapter__sub_object() &rArr; ProtocolAdapter::ProtocolAdapter__sub_object() &rArr; AdapterConfig::instance() &rArr; AdapterConfig::AdapterConfig() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::instance()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolAdapter::ProtocolAdapter__sub_object()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::CanReplyFormatter()
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolAdapter::getAdapter(int)
</UL>

<P><STRONG><a name="[5f]"></a>IsoCan11Adapter::onConnectEcu()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isocan.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> isocan.o(.constdata__ZTV15IsoCan11Adapter)
</UL>
<P><STRONG><a name="[60]"></a>IsoCan11Adapter::getDescription()</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, isocan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = IsoCan11Adapter::getDescription() &rArr; AdptSendReply(const char*) &rArr; AdptSendReply(util::string&) &rArr; util::string::operator +=(const char*) &rArr; util::string::append(const char*) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::getBoolProperty(int) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isocan.o(.constdata__ZTV15IsoCan11Adapter)
</UL>
<P><STRONG><a name="[61]"></a>IsoCan11Adapter::getDescriptionNum()</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, isocan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = IsoCan11Adapter::getDescriptionNum() &rArr; AdptSendReply(const char*) &rArr; AdptSendReply(util::string&) &rArr; util::string::operator +=(const char*) &rArr; util::string::append(const char*) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::getBoolProperty(int) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isocan.o(.constdata__ZTV15IsoCan11Adapter)
</UL>
<P><STRONG><a name="[65]"></a>IsoCan11Adapter::getID() const</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, isocan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IsoCan11Adapter::getID() const &rArr; ByteArray::asCanId() const
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::getBytesProperty(int) const
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteArray::asCanId() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isocan.o(.constdata__ZTV15IsoCan11Adapter)
</UL>
<P><STRONG><a name="[64]"></a>IsoCan11Adapter::setFilterAndMask()</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, isocan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IsoCan11Adapter::setFilterAndMask() &rArr; CanDriver::setFilterAndMask(unsigned, unsigned, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::setFilterAndMask(unsigned, unsigned, bool)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::getBytesProperty(int) const
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteArray::asCanId() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isocan.o(.constdata__ZTV15IsoCan11Adapter)
</UL>
<P><STRONG><a name="[66]"></a>IsoCan11Adapter::processFlowFrame(const CanMsgBuffer*)</STRONG> (Thumb, 172 bytes, Stack size 80 bytes, isocan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = IsoCan11Adapter::processFlowFrame(const CanMsgBuffer*) &rArr; CanDriver::send(const CanMsgBuffer*) &rArr; AdptLED::instance() &rArr; AdptLED::AdptLED() &rArr; PeriodicTimer::PeriodicTimer(void(*)()) &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::send(const CanMsgBuffer*)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::getBytesProperty(int) const
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::getIntProperty(int) const
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::getBoolProperty(int) const
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMsgBuffer::CanMsgBuffer(unsigned, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteArray::asCanId() const
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanHistory::add2Buffer(const CanMsgBuffer*, bool, unsigned char)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isocan.o(.constdata__ZTV15IsoCan11Adapter)
</UL>
<P><STRONG><a name="[63]"></a>IsoCan11Adapter::getProtocol() const</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, isocan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsoCan11Adapter::getProtocol() const
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::getIntProperty(int) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isocan.o(.constdata__ZTV15IsoCan11Adapter)
</UL>
<P><STRONG><a name="[62]"></a>IsoCan11Adapter::open()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isocan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IsoCan11Adapter::open() &rArr; AdptLED::instance() &rArr; AdptLED::AdptLED() &rArr; PeriodicTimer::PeriodicTimer(void(*)()) &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptLED::instance()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptLED::startTimer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isocan.o(.constdata__ZTV15IsoCan11Adapter)
</UL>
<P><STRONG><a name="[67]"></a>IsoCan29Adapter::onConnectEcu()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isocan.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> isocan.o(.constdata__ZTV15IsoCan29Adapter)
</UL>
<P><STRONG><a name="[68]"></a>IsoCan29Adapter::getDescription()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, isocan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = IsoCan29Adapter::getDescription() &rArr; AdptSendReply(const char*) &rArr; AdptSendReply(util::string&) &rArr; util::string::operator +=(const char*) &rArr; util::string::append(const char*) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::getBoolProperty(int) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isocan.o(.constdata__ZTV15IsoCan29Adapter)
</UL>
<P><STRONG><a name="[69]"></a>IsoCan29Adapter::getDescriptionNum()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, isocan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = IsoCan29Adapter::getDescriptionNum() &rArr; AdptSendReply(const char*) &rArr; AdptSendReply(util::string&) &rArr; util::string::operator +=(const char*) &rArr; util::string::append(const char*) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::getBoolProperty(int) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isocan.o(.constdata__ZTV15IsoCan29Adapter)
</UL>
<P><STRONG><a name="[6d]"></a>IsoCan29Adapter::getID() const</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, isocan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IsoCan29Adapter::getID() const &rArr; ByteArray::asCanId() const
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::getBytesProperty(int) const
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteArray::asCanId() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isocan.o(.constdata__ZTV15IsoCan29Adapter)
</UL>
<P><STRONG><a name="[6c]"></a>IsoCan29Adapter::setFilterAndMask()</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, isocan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IsoCan29Adapter::setFilterAndMask() &rArr; CanDriver::setFilterAndMask(unsigned, unsigned, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::setFilterAndMask(unsigned, unsigned, bool)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::getBytesProperty(int) const
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteArray::asCanId() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isocan.o(.constdata__ZTV15IsoCan29Adapter)
</UL>
<P><STRONG><a name="[6e]"></a>IsoCan29Adapter::processFlowFrame(const CanMsgBuffer*)</STRONG> (Thumb, 74 bytes, Stack size 64 bytes, isocan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = IsoCan29Adapter::processFlowFrame(const CanMsgBuffer*) &rArr; CanDriver::send(const CanMsgBuffer*) &rArr; AdptLED::instance() &rArr; AdptLED::AdptLED() &rArr; PeriodicTimer::PeriodicTimer(void(*)()) &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::send(const CanMsgBuffer*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMsgBuffer::CanMsgBuffer(unsigned, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanHistory::add2Buffer(const CanMsgBuffer*, bool, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isocan.o(.constdata__ZTV15IsoCan29Adapter)
</UL>
<P><STRONG><a name="[6a]"></a>IsoCan29Adapter::open()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isocan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IsoCan29Adapter::open() &rArr; AdptLED::instance() &rArr; AdptLED::AdptLED() &rArr; PeriodicTimer::PeriodicTimer(void(*)()) &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptLED::instance()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptLED::startTimer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isocan.o(.constdata__ZTV15IsoCan29Adapter)
</UL>
<P><STRONG><a name="[11d]"></a>OBDProfile::OBDProfile()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, obdprofile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OBDProfile::OBDProfile() &rArr; ProtocolAdapter::getAdapter(int) &rArr; IsoCanAdapter::IsoCanAdapter__sub_object() &rArr; ProtocolAdapter::ProtocolAdapter__sub_object() &rArr; AdapterConfig::instance() &rArr; AdapterConfig::AdapterConfig() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolAdapter::getAdapter(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::instance()
</UL>

<P><STRONG><a name="[14e]"></a>OBDProfile::OBDProfile__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, obdprofile.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>OBDProfile::instance()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, obdprofile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OBDProfile::instance() &rArr; OBDProfile::OBDProfile() &rArr; ProtocolAdapter::getAdapter(int) &rArr; IsoCanAdapter::IsoCanAdapter__sub_object() &rArr; ProtocolAdapter::ProtocolAdapter__sub_object() &rArr; AdapterConfig::instance() &rArr; AdapterConfig::AdapterConfig() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::OBDProfile()
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::SetDefault()
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSetProtocol(const util::string&, int)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnProtocolClose(const util::string&, int)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnKwDisplay(const util::string&, int)
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnProtocolDescribeNum(const util::string&, int)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnProtocolDescribe(const util::string&, int)
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnBufferDump(const util::string&, int)
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnWiringTest(const util::string&, int)
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnCanSetFilterAndMask(const util::string&, int)
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnCanSetReceiveAddress(const util::string&, int)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptOnCmd(const DataCollector*)
</UL>

<P><STRONG><a name="[b9]"></a>OBDProfile::getProtocolDescription() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, obdprofile.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnProtocolDescribe(const util::string&, int)
</UL>

<P><STRONG><a name="[ba]"></a>OBDProfile::getProtocolDescriptionNum() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, obdprofile.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnProtocolDescribeNum(const util::string&, int)
</UL>

<P><STRONG><a name="[c0]"></a>OBDProfile::setProtocol(int, bool)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, obdprofile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OBDProfile::setProtocol(int, bool) &rArr; ProtocolAdapter::getAdapter(int) &rArr; IsoCanAdapter::IsoCanAdapter__sub_object() &rArr; ProtocolAdapter::ProtocolAdapter__sub_object() &rArr; AdapterConfig::instance() &rArr; AdapterConfig::AdapterConfig() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolAdapter::getAdapter(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::SetDefault()
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSetProtocol(const util::string&, int)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::onRequestImpl(const DataCollector*)
</UL>

<P><STRONG><a name="[b8]"></a>OBDProfile::dumpBuffer()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, obdprofile.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnBufferDump(const util::string&, int)
</UL>

<P><STRONG><a name="[bc]"></a>OBDProfile::closeProtocol()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, obdprofile.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnProtocolClose(const util::string&, int)
</UL>

<P><STRONG><a name="[11f]"></a>OBDProfile::sendLengthCheck(int)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, obdprofile.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::onRequestImpl(const DataCollector*)
</UL>

<P><STRONG><a name="[11e]"></a>OBDProfile::onRequestImpl(const DataCollector*)</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, obdprofile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OBDProfile::onRequestImpl(const DataCollector*) &rArr; OBDProfile::setProtocol(int, bool) &rArr; ProtocolAdapter::getAdapter(int) &rArr; IsoCanAdapter::IsoCanAdapter__sub_object() &rArr; ProtocolAdapter::ProtocolAdapter__sub_object() &rArr; AdapterConfig::instance() &rArr; AdapterConfig::AdapterConfig() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::operator ==(const util::string&, const char*)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::setProtocol(int, bool)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::getBoolProperty(int) const
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::instance()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::sendLengthCheck(int)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolAdapter::getAdapter(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::onRequest(const DataCollector*)
</UL>

<P><STRONG><a name="[c5]"></a>OBDProfile::onRequest(const DataCollector*)</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, obdprofile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OBDProfile::onRequest(const DataCollector*) &rArr; OBDProfile::onRequestImpl(const DataCollector*) &rArr; OBDProfile::setProtocol(int, bool) &rArr; ProtocolAdapter::getAdapter(int) &rArr; IsoCanAdapter::IsoCanAdapter__sub_object() &rArr; ProtocolAdapter::ProtocolAdapter__sub_object() &rArr; AdapterConfig::instance() &rArr; AdapterConfig::AdapterConfig() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::string(const char*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::~string()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendString(const util::string&)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::onRequestImpl(const DataCollector*)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptOnCmd(const DataCollector*)
</UL>

<P><STRONG><a name="[b6]"></a>OBDProfile::wiringCheck()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, obdprofile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OBDProfile::wiringCheck() &rArr; ProtocolAdapter::getAdapter(int) &rArr; IsoCanAdapter::IsoCanAdapter__sub_object() &rArr; ProtocolAdapter::ProtocolAdapter__sub_object() &rArr; AdapterConfig::instance() &rArr; AdapterConfig::AdapterConfig() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolAdapter::getAdapter(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnWiringTest(const util::string&, int)
</UL>

<P><STRONG><a name="[bb]"></a>OBDProfile::kwDisplay()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, obdprofile.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnKwDisplay(const util::string&, int)
</UL>

<P><STRONG><a name="[b4]"></a>OBDProfile::setFilterAndMask()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, obdprofile.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnCanSetFilterAndMask(const util::string&, int)
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnCanSetReceiveAddress(const util::string&, int)
</UL>

<P><STRONG><a name="[56]"></a>ProtocolAdapter::close()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, padapter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolAdapter::ProtocolAdapter__sub_object()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> autoadapter.o(.constdata__ZTV11AutoAdapter)
<LI> padapter.o(.constdata__ZTV15ProtocolAdapter)
<LI> isocan.o(.constdata__ZTV13IsoCanAdapter)
<LI> isocan.o(.constdata__ZTV15IsoCan11Adapter)
<LI> isocan.o(.constdata__ZTV15IsoCan29Adapter)
</UL>
<P><STRONG><a name="[119]"></a>ProtocolAdapter::ProtocolAdapter__sub_object()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, padapter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ProtocolAdapter::ProtocolAdapter__sub_object() &rArr; AdapterConfig::instance() &rArr; AdapterConfig::AdapterConfig() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::instance()
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolAdapter::close()
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::IsoCanAdapter__sub_object()
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolAdapter::getAdapter(int)
</UL>

<P><STRONG><a name="[fc]"></a>ProtocolAdapter::getAdapter(int)</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, padapter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ProtocolAdapter::getAdapter(int) &rArr; IsoCanAdapter::IsoCanAdapter__sub_object() &rArr; ProtocolAdapter::ProtocolAdapter__sub_object() &rArr; AdapterConfig::instance() &rArr; AdapterConfig::AdapterConfig() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolAdapter::ProtocolAdapter__sub_object()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::IsoCanAdapter__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::wiringCheck()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::setProtocol(int, bool)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::onRequestImpl(const DataCollector*)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::OBDProfile()
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAdapter::doConnect(int, bool)
</UL>

<P><STRONG><a name="[a6]"></a>util::stoul(const util::string&, unsigned*, int)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, algorithms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = util::stoul(const util::string&, unsigned*, int) &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSetProtocol(const util::string&, int)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnCanSetFlowControlMode(const util::string&, int)
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSetValueInt(const util::string&, int)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoReceiveParse(const util::string&, unsigned&, unsigned&)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_bytes(const util::string&, unsigned char*)
</UL>

<P><STRONG><a name="[a0]"></a>util::to_ascii(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, algorithms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = util::to_ascii(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to SysutilitySTM32F0xx_cpp]::UIDToString(unsigned*)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_ascii(const unsigned char*, unsigned, util::string&)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIDToString(unsigned, util::string&, bool)
</UL>

<P><STRONG><a name="[10d]"></a>CanMsgBuffer::CanMsgBuffer()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, canmsgbuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CanMsgBuffer::CanMsgBuffer()
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::receiveControlFrame(unsigned char&, unsigned char&, unsigned char&)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::receiveFromEcu(bool)
</UL>

<P><STRONG><a name="[14f]"></a>CanMsgBuffer::CanMsgBuffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, canmsgbuffer.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>CanMsgBuffer::CanMsgBuffer(unsigned, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, canmsgbuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CanMsgBuffer::CanMsgBuffer(unsigned, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan29Adapter::processFlowFrame(const CanMsgBuffer*)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan11Adapter::processFlowFrame(const CanMsgBuffer*)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::onTryConnectEcu(bool)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::sendFrameToEcu(const unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[150]"></a>CanMsgBuffer::CanMsgBuffer__sub_object(unsigned, bool, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, canmsgbuffer.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>util::string::__init(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = util::string::__init(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::string(const util::string&)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::string(const char*)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::string(unsigned)
</UL>

<P><STRONG><a name="[9c]"></a>util::string::string(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = util::string::string(unsigned) &rArr; util::string::__init(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::__init(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to SysutilitySTM32F0xx_cpp]::UIDToString(unsigned*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdUart::CmdUart()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::operator +(const char*, const util::string&)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const util::string&)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::substr(unsigned, unsigned) const
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCollector::DataCollector()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptOnCmd(const DataCollector*)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanHistory::dumpCurrentBuffer()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyNextFrame(const CanMsgBuffer*, int)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyFirstFrame(const CanMsgBuffer*)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::reply(const CanMsgBuffer*)
</UL>

<P><STRONG><a name="[151]"></a>util::string::string__sub_object(unsigned)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, lstring.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>util::string::string(const char*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = util::string::string(const char*) &rArr; util::string::__init(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::__init(unsigned)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::onRequest(const DataCollector*)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::DispatchATCmd(const util::string&, int, bool)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptOnCmd(const DataCollector*)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptDispatcherInit()
</UL>

<P><STRONG><a name="[152]"></a>util::string::string__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, lstring.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>util::string::string(const util::string&)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = util::string::string(const util::string&) &rArr; util::string::__init(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::__init(unsigned)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSetBytes(const util::string&, int)
</UL>

<P><STRONG><a name="[153]"></a>util::string::string__sub_object(const util::string&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, lstring.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>util::string::__move_assign(util::string&)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lstring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::operator =(util::string&&)
</UL>

<P><STRONG><a name="[a7]"></a>util::string::~string()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = util::string::~string() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdUart::~CmdUart()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::onRequest(const DataCollector*)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptReadSerialNum()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const util::string&)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::ParseSTCmd(const util::string&)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::DispatchATCmd(const util::string&, int, bool)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSet4HeaderBytes(const util::string&, int)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSetProtocol(const util::string&, int)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSetBytes(const util::string&, int)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoReceiveParse(const util::string&, unsigned&, unsigned&)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_bytes(const util::string&, unsigned char*)
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCollector::~DataCollector()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptOnCmd(const DataCollector*)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptDispatcherInit()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanHistory::dumpCurrentBuffer()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyNextFrame(const CanMsgBuffer*, int)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyFirstFrame(const CanMsgBuffer*)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::reply(const CanMsgBuffer*)
</UL>

<P><STRONG><a name="[154]"></a>util::string::~string__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, lstring.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>util::string::resize(unsigned)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lstring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to SysutilitySTM32F0xx_cpp]::UIDToString(unsigned*)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanHistory::dumpCurrentBuffer()
</UL>

<P><STRONG><a name="[124]"></a>util::string::reserve(unsigned)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::operator =(const util::string&)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::operator =(const char*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::operator +=(char)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::append(const char*, unsigned)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::append(const char*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::resize(unsigned, char)
</UL>

<P><STRONG><a name="[108]"></a>util::string::resize(unsigned, char)</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, lstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = util::string::resize(unsigned, char) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::reserve(unsigned)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanHistory::dumpCurrentBuffer()
</UL>

<P><STRONG><a name="[126]"></a>util::string::append(const char*)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = util::string::append(const char*) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::reserve(unsigned)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::operator +=(const char*)
</UL>

<P><STRONG><a name="[127]"></a>util::string::append(const char*, unsigned)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = util::string::append(const char*, unsigned) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::reserve(unsigned)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::substr(unsigned, unsigned) const
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::operator +=(const util::string&)
</UL>

<P><STRONG><a name="[98]"></a>util::string::operator +=(char)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = util::string::operator +=(char) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::reserve(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to SysutilitySTM32F0xx_cpp]::UIDToString(unsigned*)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_ascii(const unsigned char*, unsigned, util::string&)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIDToString(unsigned, util::string&, bool)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCollector::putChar(char)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanHistory::dumpCurrentBuffer()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyH1(const CanMsgBuffer*, unsigned, util::string&)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyCAF0(const CanMsgBuffer*, util::string&)
</UL>

<P><STRONG><a name="[9a]"></a>util::string::clear()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lstring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCollector::reset()
</UL>

<P><STRONG><a name="[a5]"></a>util::string::substr(unsigned, unsigned) const</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = util::string::substr(unsigned, unsigned) const &rArr; util::string::append(const char*, unsigned) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::string(unsigned)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::append(const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::ParseSTCmd(const util::string&)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::DispatchATCmd(const util::string&, int, bool)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSet4HeaderBytes(const util::string&, int)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSetProtocol(const util::string&, int)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoReceiveParse(const util::string&, unsigned&, unsigned&)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_bytes(const util::string&, unsigned char*)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptOnCmd(const DataCollector*)
</UL>

<P><STRONG><a name="[128]"></a>util::string::operator +=(const util::string&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = util::string::operator +=(const util::string&) &rArr; util::string::append(const char*, unsigned) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::append(const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::operator +(const char*, const util::string&)
</UL>

<P><STRONG><a name="[ab]"></a>util::string::operator +=(const char*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = util::string::operator +=(const char*) &rArr; util::string::append(const char*) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::append(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::operator +(const char*, const util::string&)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(util::string&)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanHistory::dumpCurrentBuffer()
</UL>

<P><STRONG><a name="[c7]"></a>util::string::operator =(const util::string&)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = util::string::operator =(const util::string&) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::reserve(unsigned)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const util::string&)
</UL>

<P><STRONG><a name="[b2]"></a>util::string::operator =(util::string&&)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = util::string::operator =(util::string&&) &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::__move_assign(util::string&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSetBytes(const util::string&, int)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptOnCmd(const DataCollector*)
</UL>

<P><STRONG><a name="[ae]"></a>util::string::operator =(const char*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = util::string::operator =(const char*) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::reserve(unsigned)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyNextFrameH0(const CanMsgBuffer*, unsigned, unsigned, int, util::string&)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyFirstFrameH0(const CanMsgBuffer*, unsigned, unsigned, util::string&)
</UL>

<P><STRONG><a name="[bf]"></a>util::operator ==(const util::string&, const char*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = util::operator ==(const util::string&, const char*) &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::ParseSTCmd(const util::string&)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::DispatchATCmd(const util::string&, int, bool)
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnCanSetTimeoutMult(const util::string&, int)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSetProtocol(const util::string&, int)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptOnCmd(const DataCollector*)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::onRequestImpl(const DataCollector*)
</UL>

<P><STRONG><a name="[b1]"></a>util::operator +(const char*, const util::string&)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = util::operator +(const char*, const util::string&) &rArr; util::string::operator +=(const char*) &rArr; util::string::append(const char*) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::operator +=(const char*)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::string(unsigned)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::operator +=(const util::string&)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSetBytes(const util::string&, int)
</UL>

<P><STRONG><a name="[7]"></a>Reset_Handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_VDDIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f042.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SystemInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, system_stm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f042.o(.text)
</UL>
<P><STRONG><a name="[7e]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, system_stm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[155]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnReadVoltage(const util::string&, int)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1us(unsigned)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1ms(unsigned)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_TimerSTM32F0xx_cpp_ac46811a
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[156]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::sendToEcuMF(const unsigned char*, int)
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::setBoolProperty(int, bool)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::getBoolProperty(int) const
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[157]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCollector::putChar(char)
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to adapter_cpp]::UserUartRcvHandler(unsigned char)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[97]"></a>toupper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, toupper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCollector::putChar(char)
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::read(CanMsgBuffer*)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::send(const CanMsgBuffer*)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::operator =(const util::string&)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::setBytesProperty(int, const ByteArray*)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdUart::send(const util::string&)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::append(const char*, unsigned)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::reserve(unsigned)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan11Adapter::processFlowFrame(const CanMsgBuffer*)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::sendToEcu(const unsigned char*, int)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::sendToEcuMF(const unsigned char*, int)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::sendFrameToEcu(const unsigned char*, unsigned char, unsigned char)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanHistory::add2Buffer(const CanMsgBuffer*, bool, unsigned char)
</UL>

<P><STRONG><a name="[158]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::resize(unsigned, char)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[15a]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteArray::clear()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMsgBuffer::CanMsgBuffer()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan11Adapter::processFlowFrame(const CanMsgBuffer*)
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::AdapterConfig()
</UL>

<P><STRONG><a name="[15c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ad]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::operator +(const char*, const util::string&)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::string(const char*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::operator =(const char*)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::append(const char*)
</UL>

<P><STRONG><a name="[12a]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::operator ==(const util::string&, const char*)
</UL>

<P><STRONG><a name="[122]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::string(const util::string&)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::string(const char*)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::operator =(const char*)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::append(const char*)
</UL>

<P><STRONG><a name="[99]"></a>strtoul</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::stoul(const util::string&, unsigned*, int)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCollector::putChar(char)
</UL>

<P><STRONG><a name="[71]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_atexit</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __aeabi_atexit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdUart::instance()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCollector::instance()
</UL>

<P><STRONG><a name="[32]"></a>__default_new_handler()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[132]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[12e]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[130]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_dtor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[13b]"></a>__rt_new_handler_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[137]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cpp_memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[76]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_final_cpp$nonempty
</UL>

<P><STRONG><a name="[131]"></a>std::terminate()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[136]"></a>__cxa_get_globals</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[73]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[15d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[15e]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[15f]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_final.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[160]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>AutoAdapter::wiringCheck()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, autoadapter.o(i._ZN11AutoAdapter11wiringCheckEv))
<BR>[Address Reference Count : 1]<UL><LI> autoadapter.o(.constdata__ZTV11AutoAdapter)
</UL>
<P><STRONG><a name="[4f]"></a>AutoAdapter::onConnectEcu()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, autoadapter.o(i._ZN11AutoAdapter12onConnectEcuEv))
<BR>[Address Reference Count : 1]<UL><LI> autoadapter.o(.constdata__ZTV11AutoAdapter)
</UL>
<P><STRONG><a name="[2b]"></a>DataCollector::~DataCollector()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, datacollector.o(i._ZN13DataCollectorD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DataCollector::~DataCollector() &rArr; util::string::~string() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::~string()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> datacollector.o(.text)
</UL>
<P><STRONG><a name="[162]"></a>DataCollector::~DataCollector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, datacollector.o(i._ZN13DataCollectorD1Ev), UNUSED)

<P><STRONG><a name="[54]"></a>ProtocolAdapter::dumpBuffer()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, autoadapter.o(i._ZN15ProtocolAdapter10dumpBufferEv))
<BR>[Address Reference Count : 2]<UL><LI> autoadapter.o(.constdata__ZTV11AutoAdapter)
<LI> padapter.o(.constdata__ZTV15ProtocolAdapter)
</UL>
<P><STRONG><a name="[59]"></a>ProtocolAdapter::setFilterAndMask()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, autoadapter.o(i._ZN15ProtocolAdapter16setFilterAndMaskEv))
<BR>[Address Reference Count : 3]<UL><LI> autoadapter.o(.constdata__ZTV11AutoAdapter)
<LI> padapter.o(.constdata__ZTV15ProtocolAdapter)
<LI> isocan.o(.constdata__ZTV13IsoCanAdapter)
</UL>
<P><STRONG><a name="[55]"></a>ProtocolAdapter::open()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, autoadapter.o(i._ZN15ProtocolAdapter4openEv))
<BR>[Address Reference Count : 3]<UL><LI> autoadapter.o(.constdata__ZTV11AutoAdapter)
<LI> padapter.o(.constdata__ZTV15ProtocolAdapter)
<LI> isocan.o(.constdata__ZTV13IsoCanAdapter)
</UL>
<P><STRONG><a name="[2c]"></a>CmdUart::~CmdUart()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cmduartstm32f0xx.o(i._ZN7CmdUartD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CmdUart::~CmdUart() &rArr; util::string::~string() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::~string()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmduartstm32f0xx.o(.text)
</UL>
<P><STRONG><a name="[163]"></a>CmdUart::~CmdUart__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, cmduartstm32f0xx.o(i._ZN7CmdUartD1Ev), UNUSED)

<P><STRONG><a name="[2e]"></a>MsgEntry::MsgEntry()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, isocan.o(i._ZN8MsgEntryC1Ev))
<BR>[Address Reference Count : 1]<UL><LI> isocan.o(.text)
</UL>
<P><STRONG><a name="[164]"></a>MsgEntry::MsgEntry__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, isocan.o(i._ZN8MsgEntryC1Ev), UNUSED)

<P><STRONG><a name="[96]"></a>ByteArray::clear()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, adapterconfig.o(i._ZN9ByteArray5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ByteArray::clear()
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteArray::ByteArray()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::clear()
</UL>

<P><STRONG><a name="[2a]"></a>ByteArray::ByteArray()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, adapterconfig.o(i._ZN9ByteArrayC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ByteArray::ByteArray() &rArr; ByteArray::clear()
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteArray::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSet4HeaderBytes(const util::string&, int)
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnCanSetReceiveAddress(const util::string&, int)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSetBytes(const util::string&, int)
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnResetBytes(const util::string&, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adapterconfig.o(.text)
</UL>
<P><STRONG><a name="[165]"></a>ByteArray::ByteArray__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, adapterconfig.o(i._ZN9ByteArrayC1Ev), UNUSED)

<P><STRONG><a name="[58]"></a>AutoAdapter::getProtocol() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, autoadapter.o(i._ZNK11AutoAdapter11getProtocolEv))
<BR>[Address Reference Count : 1]<UL><LI> autoadapter.o(.constdata__ZTV11AutoAdapter)
</UL>
<P><STRONG><a name="[6b]"></a>IsoCan29Adapter::getProtocol() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, isocan.o(i._ZNK15IsoCan29Adapter11getProtocolEv))
<BR>[Address Reference Count : 1]<UL><LI> isocan.o(.constdata__ZTV15IsoCan29Adapter)
</UL>
<P><STRONG><a name="[11a]"></a>ByteArray::asCanId() const</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, isocan.o(i._ZNK9ByteArray7asCanIdEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ByteArray::asCanId() const
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan29Adapter::setFilterAndMask()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan29Adapter::getID() const
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan11Adapter::processFlowFrame(const CanMsgBuffer*)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan11Adapter::setFilterAndMask()
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCan11Adapter::getID() const
</UL>

<P><STRONG><a name="[123]"></a>operator delete[] (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_del.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::operator =(util::string&&)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::~string()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::reserve(unsigned)
</UL>

<P><STRONG><a name="[13a]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>

<P><STRONG><a name="[9d]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCollector::DataCollector()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::reserve(unsigned)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::__init(unsigned)
</UL>

<P><STRONG><a name="[f6]"></a>operator new(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptLED::AdptLED()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::IsoCanAdapter__sub_object()
</UL>

<P><STRONG><a name="[13c]"></a>__0sprintf$8</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[166]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[be]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::onRequest(const DataCollector*)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnReadVoltage(const util::string&, int)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReplyFormatter::replyNextFrameH0(const CanMsgBuffer*, unsigned, unsigned, int, util::string&)
</UL>

<P><STRONG><a name="[120]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, obdprofile.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::onRequest(const DataCollector*)
</UL>

<P><STRONG><a name="[12d]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[167]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[8e]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::AdapterConfig()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsoCanAdapter::IsoCanAdapter__sub_object()
</UL>

<P><STRONG><a name="[90]"></a>__cxa_guard_acquire</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptLED::instance()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::instance()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::instance()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdUart::instance()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCollector::instance()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::instance()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::instance(int)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolAdapter::getAdapter(int)
</UL>

<P><STRONG><a name="[5a]"></a>__cxa_pure_virtual</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __cxa_pure_virtual
</UL>
<BR>[Address Reference Count : 2]<UL><LI> padapter.o(.constdata__ZTV15ProtocolAdapter)
<LI> isocan.o(.constdata__ZTV13IsoCanAdapter)
</UL>
<P><STRONG><a name="[168]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[169]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[16a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[135]"></a>free</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>

<P><STRONG><a name="[12f]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[29]"></a>[local to adapter_cpp]::UserUartRcvHandler(unsigned char)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, adapter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = [local to adapter_cpp]::UserUartRcvHandler(unsigned char) &rArr; DataCollector::putChar(char) &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::getBoolProperty(int) const
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdUart::send(unsigned char)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCollector::putChar(char)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::instance()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adapter.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>__sti___11_adapter_cpp_929dd7a5</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, adapter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = __sti___11_adapter_cpp_929dd7a5 &rArr; DataCollector::instance() &rArr; DataCollector::DataCollector() &rArr; util::string::string(unsigned) &rArr; util::string::__init(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCollector::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adapter.o(.init_array)
</UL>
<P><STRONG><a name="[85]"></a>[local to adapter_cpp]::AdapterRun()</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, adapter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = [local to adapter_cpp]::AdapterRun() &rArr; AdptOnCmd(const DataCollector*) &rArr; OBDProfile::onRequest(const DataCollector*) &rArr; OBDProfile::onRequestImpl(const DataCollector*) &rArr; OBDProfile::setProtocol(int, bool) &rArr; ProtocolAdapter::getAdapter(int) &rArr; IsoCanAdapter::IsoCanAdapter__sub_object() &rArr; ProtocolAdapter::ProtocolAdapter__sub_object() &rArr; AdapterConfig::instance() &rArr; AdapterConfig::AdapterConfig() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdUart::instance()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdUart::init(unsigned)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCollector::reset()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptOnCmd(const DataCollector*)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptPowerModeConfigure()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptDispatcherInit()
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b]"></a>[local to dispatcher_cpp]::OnSetValueTrue(const util::string&, int)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = [local to dispatcher_cpp]::OnSetValueTrue(const util::string&, int) &rArr; AdptSendReply(const char*) &rArr; AdptSendReply(util::string&) &rArr; util::string::operator +=(const char*) &rArr; util::string::append(const char*) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::setBoolProperty(int, bool)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[3d]"></a>[local to dispatcher_cpp]::OnSetValueFalse(const util::string&, int)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = [local to dispatcher_cpp]::OnSetValueFalse(const util::string&, int) &rArr; AdptSendReply(const char*) &rArr; AdptSendReply(util::string&) &rArr; util::string::operator +=(const char*) &rArr; util::string::append(const char*) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::setBoolProperty(int, bool)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[3c]"></a>[local to dispatcher_cpp]::OnSetValueInt(const util::string&, int)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = [local to dispatcher_cpp]::OnSetValueInt(const util::string&, int) &rArr; AdptSendReply(const char*) &rArr; AdptSendReply(util::string&) &rArr; util::string::operator +=(const char*) &rArr; util::string::append(const char*) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::stoul(const util::string&, unsigned*, int)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::setIntProperty(int, unsigned)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[3e]"></a>[local to dispatcher_cpp]::OnResetBytes(const util::string&, int)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = [local to dispatcher_cpp]::OnResetBytes(const util::string&, int) &rArr; AdptSendReply(const char*) &rArr; AdptSendReply(util::string&) &rArr; util::string::operator +=(const char*) &rArr; util::string::append(const char*) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteArray::ByteArray()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::setBytesProperty(int, const ByteArray*)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>[local to dispatcher_cpp]::OnSetBytes(const util::string&, int)</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = [local to dispatcher_cpp]::OnSetBytes(const util::string&, int) &rArr; to_bytes(const util::string&, unsigned char*) &rArr; util::stoul(const util::string&, unsigned*, int) &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::operator +(const char*, const util::string&)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::operator =(util::string&&)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::string(const util::string&)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_bytes(const util::string&, unsigned char*)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::~string()
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteArray::ByteArray()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::setBytesProperty(int, const ByteArray*)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnCanSetFilterAndMask(const util::string&, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[39]"></a>[local to dispatcher_cpp]::OnSetOK(const util::string&, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = [local to dispatcher_cpp]::OnSetOK(const util::string&, int) &rArr; AdptSendReply(const char*) &rArr; AdptSendReply(util::string&) &rArr; util::string::operator +=(const char*) &rArr; util::string::append(const char*) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>[local to dispatcher_cpp]::OnCanShowStatus(const util::string&, int)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispatcher.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[41]"></a>[local to dispatcher_cpp]::OnCanSetReceiveAddress(const util::string&, int)</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = [local to dispatcher_cpp]::OnCanSetReceiveAddress(const util::string&, int) &rArr; AutoReceiveParse(const util::string&, unsigned&, unsigned&) &rArr; util::stoul(const util::string&, unsigned*, int) &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::instance()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::setFilterAndMask()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoReceiveParse(const util::string&, unsigned&, unsigned&)
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteArray::ByteArray()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::setBytesProperty(int, const ByteArray*)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>[local to dispatcher_cpp]::OnCanSetFlowControlMode(const util::string&, int)</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = [local to dispatcher_cpp]::OnCanSetFlowControlMode(const util::string&, int) &rArr; AdptSendReply(const char*) &rArr; AdptSendReply(util::string&) &rArr; util::string::operator +=(const char*) &rArr; util::string::append(const char*) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::stoul(const util::string&, unsigned*, int)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::getBytesProperty(int) const
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::setIntProperty(int, unsigned)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[40]"></a>[local to dispatcher_cpp]::OnCanSetFilterAndMask(const util::string&, int)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = [local to dispatcher_cpp]::OnCanSetFilterAndMask(const util::string&, int) &rArr; [local to dispatcher_cpp]::OnSetBytes(const util::string&, int) &rArr; to_bytes(const util::string&, unsigned char*) &rArr; util::stoul(const util::string&, unsigned*, int) &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::instance()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::setFilterAndMask()
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSetBytes(const util::string&, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[34]"></a>[local to dispatcher_cpp]::OnSendReplyCopyright(const util::string&, int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = [local to dispatcher_cpp]::OnSendReplyCopyright(const util::string&, int) &rArr; AdptSendReply(const char*) &rArr; AdptSendReply(util::string&) &rArr; util::string::operator +=(const char*) &rArr; util::string::append(const char*) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[35]"></a>[local to dispatcher_cpp]::OnAdapterSignature(const util::string&, int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = [local to dispatcher_cpp]::OnAdapterSignature(const util::string&, int) &rArr; AdptSendReply(const char*) &rArr; AdptSendReply(util::string&) &rArr; util::string::operator +=(const char*) &rArr; util::string::append(const char*) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[36]"></a>[local to dispatcher_cpp]::OnWiringTest(const util::string&, int)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = [local to dispatcher_cpp]::OnWiringTest(const util::string&, int) &rArr; OBDProfile::instance() &rArr; OBDProfile::OBDProfile() &rArr; ProtocolAdapter::getAdapter(int) &rArr; IsoCanAdapter::IsoCanAdapter__sub_object() &rArr; ProtocolAdapter::ProtocolAdapter__sub_object() &rArr; AdapterConfig::instance() &rArr; AdapterConfig::AdapterConfig() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::instance()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::wiringCheck()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[37]"></a>[local to dispatcher_cpp]::OnGetSerial(const util::string&, int)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = [local to dispatcher_cpp]::OnGetSerial(const util::string&, int) &rArr; AdptReadSerialNum() &rArr; [local to SysutilitySTM32F0xx_cpp]::UIDToString(unsigned*) &rArr; util::string::operator +=(char) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptReadSerialNum()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[38]"></a>[local to dispatcher_cpp]::OnSendReplyVersion(const util::string&, int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = [local to dispatcher_cpp]::OnSendReplyVersion(const util::string&, int) &rArr; AdptSendReply(const char*) &rArr; AdptSendReply(util::string&) &rArr; util::string::operator +=(const char*) &rArr; util::string::append(const char*) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[3a]"></a>[local to dispatcher_cpp]::OnBufferDump(const util::string&, int)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = [local to dispatcher_cpp]::OnBufferDump(const util::string&, int) &rArr; OBDProfile::instance() &rArr; OBDProfile::OBDProfile() &rArr; ProtocolAdapter::getAdapter(int) &rArr; IsoCanAdapter::IsoCanAdapter__sub_object() &rArr; ProtocolAdapter::ProtocolAdapter__sub_object() &rArr; AdapterConfig::instance() &rArr; AdapterConfig::AdapterConfig() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::instance()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::dumpBuffer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>[local to dispatcher_cpp]::OnProtocolDescribe(const util::string&, int)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = [local to dispatcher_cpp]::OnProtocolDescribe(const util::string&, int) &rArr; OBDProfile::instance() &rArr; OBDProfile::OBDProfile() &rArr; ProtocolAdapter::getAdapter(int) &rArr; IsoCanAdapter::IsoCanAdapter__sub_object() &rArr; ProtocolAdapter::ProtocolAdapter__sub_object() &rArr; AdapterConfig::instance() &rArr; AdapterConfig::AdapterConfig() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::getProtocolDescription() const
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>[local to dispatcher_cpp]::OnProtocolDescribeNum(const util::string&, int)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = [local to dispatcher_cpp]::OnProtocolDescribeNum(const util::string&, int) &rArr; OBDProfile::instance() &rArr; OBDProfile::OBDProfile() &rArr; ProtocolAdapter::getAdapter(int) &rArr; IsoCanAdapter::IsoCanAdapter__sub_object() &rArr; ProtocolAdapter::ProtocolAdapter__sub_object() &rArr; AdapterConfig::instance() &rArr; AdapterConfig::AdapterConfig() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::getProtocolDescriptionNum() const
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>[local to dispatcher_cpp]::OnKwDisplay(const util::string&, int)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = [local to dispatcher_cpp]::OnKwDisplay(const util::string&, int) &rArr; OBDProfile::instance() &rArr; OBDProfile::OBDProfile() &rArr; ProtocolAdapter::getAdapter(int) &rArr; IsoCanAdapter::IsoCanAdapter__sub_object() &rArr; ProtocolAdapter::ProtocolAdapter__sub_object() &rArr; AdapterConfig::instance() &rArr; AdapterConfig::AdapterConfig() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::kwDisplay()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>[local to dispatcher_cpp]::OnProtocolClose(const util::string&, int)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = [local to dispatcher_cpp]::OnProtocolClose(const util::string&, int) &rArr; OBDProfile::instance() &rArr; OBDProfile::OBDProfile() &rArr; ProtocolAdapter::getAdapter(int) &rArr; IsoCanAdapter::IsoCanAdapter__sub_object() &rArr; ProtocolAdapter::ProtocolAdapter__sub_object() &rArr; AdapterConfig::instance() &rArr; AdapterConfig::AdapterConfig() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::instance()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::closeProtocol()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>[local to dispatcher_cpp]::OnReadVoltage(const util::string&, int)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = [local to dispatcher_cpp]::OnReadVoltage(const util::string&, int) &rArr; AdptSendReply(const char*) &rArr; AdptSendReply(util::string&) &rArr; util::string::operator +=(const char*) &rArr; util::string::append(const char*) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDriver::read()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>[local to dispatcher_cpp]::OnSetProtocol(const util::string&, int)</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = [local to dispatcher_cpp]::OnSetProtocol(const util::string&, int) &rArr; OBDProfile::instance() &rArr; OBDProfile::OBDProfile() &rArr; ProtocolAdapter::getAdapter(int) &rArr; IsoCanAdapter::IsoCanAdapter__sub_object() &rArr; ProtocolAdapter::ProtocolAdapter__sub_object() &rArr; AdapterConfig::instance() &rArr; AdapterConfig::AdapterConfig() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::operator ==(const util::string&, const char*)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::instance()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::setProtocol(int, bool)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::substr(unsigned, unsigned) const
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::stoul(const util::string&, unsigned*, int)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::~string()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::setIntProperty(int, unsigned)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::setBoolProperty(int, bool)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>[local to dispatcher_cpp]::OnSendReplyInterface(const util::string&, int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = [local to dispatcher_cpp]::OnSendReplyInterface(const util::string&, int) &rArr; AdptSendReply(const char*) &rArr; AdptSendReply(util::string&) &rArr; util::string::operator +=(const char*) &rArr; util::string::append(const char*) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>[local to dispatcher_cpp]::OnSet4HeaderBytes(const util::string&, int)</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = [local to dispatcher_cpp]::OnSet4HeaderBytes(const util::string&, int) &rArr; to_bytes(const util::string&, unsigned char*) &rArr; util::stoul(const util::string&, unsigned*, int) &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::substr(unsigned, unsigned) const
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_bytes(const util::string&, unsigned char*)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::~string()
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteArray::ByteArray()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::setBytesProperty(int, const ByteArray*)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>[local to dispatcher_cpp]::OnCanSetTimeoutMult(const util::string&, int)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = [local to dispatcher_cpp]::OnCanSetTimeoutMult(const util::string&, int) &rArr; AdptSendReply(const char*) &rArr; AdptSendReply(util::string&) &rArr; util::string::operator +=(const char*) &rArr; util::string::append(const char*) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::operator ==(const util::string&, const char*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::setIntProperty(int, unsigned)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>[local to dispatcher_cpp]::SetDefault()</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = [local to dispatcher_cpp]::SetDefault() &rArr; OBDProfile::instance() &rArr; OBDProfile::OBDProfile() &rArr; ProtocolAdapter::getAdapter(int) &rArr; IsoCanAdapter::IsoCanAdapter__sub_object() &rArr; ProtocolAdapter::ProtocolAdapter__sub_object() &rArr; AdapterConfig::instance() &rArr; AdapterConfig::AdapterConfig() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::instance()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBDProfile::setProtocol(int, bool)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::clear()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::setIntProperty(int, unsigned)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::setBoolProperty(int, bool)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdapterConfig::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnReset(const util::string&, int)
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::OnSetDefault(const util::string&, int)
</UL>

<P><STRONG><a name="[44]"></a>[local to dispatcher_cpp]::OnSetDefault(const util::string&, int)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = [local to dispatcher_cpp]::OnSetDefault(const util::string&, int) &rArr; [local to dispatcher_cpp]::SetDefault() &rArr; OBDProfile::instance() &rArr; OBDProfile::OBDProfile() &rArr; ProtocolAdapter::getAdapter(int) &rArr; IsoCanAdapter::IsoCanAdapter__sub_object() &rArr; ProtocolAdapter::ProtocolAdapter__sub_object() &rArr; AdapterConfig::instance() &rArr; AdapterConfig::AdapterConfig() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::SetDefault()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>[local to dispatcher_cpp]::OnReset(const util::string&, int)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = [local to dispatcher_cpp]::OnReset(const util::string&, int) &rArr; [local to dispatcher_cpp]::SetDefault() &rArr; OBDProfile::instance() &rArr; OBDProfile::OBDProfile() &rArr; ProtocolAdapter::getAdapter(int) &rArr; IsoCanAdapter::IsoCanAdapter__sub_object() &rArr; ProtocolAdapter::ProtocolAdapter__sub_object() &rArr; AdapterConfig::instance() &rArr; AdapterConfig::AdapterConfig() &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dispatcher_cpp]::SetDefault()
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptDispatcherInit()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>[local to dispatcher_cpp]::DispatchATCmd(const util::string&, int, bool)</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = [local to dispatcher_cpp]::DispatchATCmd(const util::string&, int, bool) &rArr; util::string::substr(unsigned, unsigned) const &rArr; util::string::append(const char*, unsigned) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::operator ==(const util::string&, const char*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::string(const char*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::substr(unsigned, unsigned) const
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::~string()
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptOnCmd(const DataCollector*)
</UL>

<P><STRONG><a name="[c4]"></a>[local to dispatcher_cpp]::ParseSTCmd(const util::string&)</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = [local to dispatcher_cpp]::ParseSTCmd(const util::string&) &rArr; AdptSendReply(const char*) &rArr; AdptSendReply(util::string&) &rArr; util::string::operator +=(const char*) &rArr; util::string::append(const char*) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::operator ==(const util::string&, const char*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptSendReply(const char*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::substr(unsigned, unsigned) const
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::~string()
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptOnCmd(const DataCollector*)
</UL>

<P><STRONG><a name="[da]"></a>[local to CanDriverSTM32F0xx_cpp]::configureCANPins()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, candriverstm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = [local to CanDriverSTM32F0xx_cpp]::configureCANPins() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::setBitBang(bool)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDriver::configure()
</UL>

<P><STRONG><a name="[ef]"></a>[local to SysutilitySTM32F0xx_cpp]::UIDToString(unsigned*)</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, sysutilitystm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = [local to SysutilitySTM32F0xx_cpp]::UIDToString(unsigned*) &rArr; util::string::operator +=(char) &rArr; util::string::reserve(unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::to_ascii(unsigned char)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::operator +=(char)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::string(unsigned)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util::string::resize(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdptReadSerialNum()
</UL>

<P><STRONG><a name="[70]"></a>__sti___18_TimerSTM32F0xx_cpp_ac46811a</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timerstm32f0xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __sti___18_TimerSTM32F0xx_cpp_ac46811a &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timerstm32f0xx.o(.init_array)
</UL>
<P><STRONG><a name="[12b]"></a>SetSysClock</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_stm32f0xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[13d]"></a>_printf_core</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>

<P><STRONG><a name="[13f]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[13e]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[33]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL>
<P><STRONG><a name="[31]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
